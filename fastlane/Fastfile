default_platform :ios

repository = "d4l-data4life/d4l-fhir-ios"
projectCore = "Data4LifeFHIRCore"
projectSTU3 = "Data4LifeFHIR"
projectR4 = "ModelsR4"
buildPath = "build/DerivedData"
device = "iPhone 12"

platform :ios do
  desc "Run unit tests"
  lane :test do
    scan(
      scheme: projectCore,
      derived_data_path: buildPath,
      devices: device,
      clean: true
    )
    scan(
      scheme: projectSTU3,
      derived_data_path: buildPath,
      devices: device,
      clean: false
    )
    scan(
      scheme: projectR4,
      derived_data_path: buildPath,
      devices: device,
      clean: false
    )
  end

  desc "Run linter and autocorrect issues"
  lane :lint do
      swiftlint(
        mode: :autocorrect,
        config_file: ".swiftlint.yml"
      )
  end

  desc "Generate All FHIR code"
  lane :generate_all do | options |
      fhir_stu3 xcode:true
      fhir_r4_helpers
      fhir_r4_tests
      lint
  end

  desc "Generate FHIR STU3 models"
  lane :generate_stu3_models do | options |
      fhir_stu3 xcode:true
  end

  desc "Generate FHIR R4 Extesnions"
  lane :generate_r4_helpers do | options |
      fhir_r4_helpers
  end

  desc "Generate FHIR R4 tests"
  lane :generate_r4_tests do | options |
      fhir_r4_tests
  end

  desc "Prepare release"
  desc "#### Options"
  desc " * **`version`** (required): The new version of the framework"
  desc " * **`api_token`** (required): Github API token"
  lane :prepare_release do | options |
    if !options[:version]
      UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end

    if !options[:api_token]
      UI.user_error!("Please add required parameter version (eg. api_token:\"xxxxxxxxx\"")
    end

    version = options[:version]
    apiToken = options[:api_token]
    remote = "origin"
    changelog = parseAndCheckChangelog("../CHANGELOG.adoc", version)
    archiveCorePath = frameworkPath(projectCore, options[:version])
    archiveStu3Path = frameworkPath(projectSTU3, options[:version])
    archiveR4Path = frameworkPath(projectR4, options[:version])

    unless changelog 
      UI.user_error!("Please add all changes of the version to the CHANGELOG.md file")
    end 

    update_plist_versions(version: version)
    update_readme_versions(version: version)
    update_badge(version: version)
    generate_docs(version: version)
    build_fhir(version: version)
    
    Dir.chdir("..") do
      remove_checksums_from_package()
      upload_archive_to_s3(repository, archiveCorePath)
      update_swift_package_file(projectCore, repository, archiveCorePath)
      upload_archive_to_s3(repository, archiveStu3Path)
      update_swift_package_file(projectSTU3, repository, archiveStu3Path)
      upload_archive_to_s3(repository, archiveR4Path)
      update_swift_package_file(projectR4, repository, archiveR4Path)
    end 

    # Ask for confirmation for github
    if prompt(text: "#{version} has been prepped for release. If you have any additional changes you would like to make to the README or CHANGELOG, please do those before continuing. Would you like to commit, and push #{version} to #{remote}?".green, boolean: true, ci_input:"y")

      # Push all generated/modified files 
      git_add
      git_commit(
        path: ".",
        message: "Preparing for the #{version} release"
      )

      push_to_git_remote(
        remote: remote,
        tags: false
      )

      # Make new draft release to GitHub
      create_github_draft(
        version: version,
        api_token: apiToken,
        changelog: changelog
      )
    else
      UI.message("When finished, commit your changes.")
    end
  end

  desc "Prepare snapshot"
  lane :prepare_snapshot do 
    snapshotName = current_git_branch().split("/").last 
    remote = "origin"

    if prompt(text: "#{snapshotName} fhir libs will be build. Would you like to go forward? (You can skip if already built)".green, boolean: true, ci_input:"y")
      build_fhir(version: snapshotName)
    end
   
    archiveCorePath = frameworkPath(projectCore, snapshotName)
    archiveStu3Path = frameworkPath(projectSTU3, snapshotName)
    archiveR4Path = frameworkPath(projectR4, snapshotName)
    
    Dir.chdir("..") do
      remove_checksums_from_package()
      upload_archive_to_s3(repository, archiveCorePath)
      update_swift_package_file(projectCore, repository, archiveCorePath)
      upload_archive_to_s3(repository, archiveStu3Path)
      update_swift_package_file(projectSTU3, repository, archiveStu3Path)
      upload_archive_to_s3(repository, archiveR4Path)
      update_swift_package_file(projectR4, repository, archiveR4Path)
    end 

    # Ask for confirmation for github
    if prompt(text: "#{snapshotName} has been prepped for snapshot-release. Would you like to commit, and push #{snapshotName} to #{remote}?".green, boolean: true, ci_input:"y")

      # Push all generated/modified files 
      git_add
      git_commit(
        path: ".",
        message: "Preparing for the #{snapshotName} release"
      )

      push_to_git_remote(
        remote: remote,
        tags: false
      )
    else
      UI.message("When finished, commit your changes.")
    end
  end

  desc "Build all xcframeworks"
  lane :build_fhir do |options|
    if options[:version] == nil
      UI.user_error!("Missing parameter version")
    end

    version = options[:version]
    coreXcFrameworkPath = "#{projectCore}.xcframework"
    stu3xcFrameworkPath = "#{projectSTU3}.xcframework"
    r4xcFrameworkPath = "#{projectR4}.xcframework"

    build_xcframework(schemeName: "#{projectCore}", frameworkName: "#{projectCore}", outputPath: coreXcFrameworkPath)
    build_xcframework(schemeName: "#{projectSTU3}", frameworkName: "#{projectSTU3}", outputPath: stu3xcFrameworkPath)
    build_xcframework(schemeName: "#{projectR4}", frameworkName: "#{projectR4}", outputPath: r4xcFrameworkPath)

    Dir.chdir("..") do
      archiveCorePath = frameworkPath(projectCore, version)
      archiveStu3Path = frameworkPath(projectSTU3, version)
      archiveR4Path = frameworkPath(projectR4, version)

      sh "zip -r #{archiveCorePath} #{coreXcFrameworkPath}"
      sh "zip -r #{archiveStu3Path} #{stu3xcFrameworkPath}"
      sh "zip -r #{archiveR4Path} #{r4xcFrameworkPath}"

      sh "rm -rf #{stu3xcFrameworkPath}"
      sh "rm -rf #{r4xcFrameworkPath}"
      sh "rm -rf #{coreXcFrameworkPath}"
    end
  end

  desc "Update version numbers in README.adoc"
  lane :update_readme_versions do | options |
    if !options[:version]
      raise "No version specified!".red
    end

    version = options[:version]
    path = "../README.adoc"
    numberOnlyVersion = version.split("-").first.delete_prefix("v")

    if numberOnlyVersion.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper number only version format".red
    end

    readmeData = File.read(path)
    readmeDataUpdated = readmeData.gsub(/ [0-9]+\.[0-9]+\.[0-9]+/, " #{numberOnlyVersion}")
    File.write(path, readmeDataUpdated)
  end

  desc "Update version number in project plists"
  lane :update_plist_versions do |options|
    if options[:version] == nil
       UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end

    version = options[:version]
    numberOnlyVersion = version.split("-").first.delete_prefix("v")

    if numberOnlyVersion.match(/\A\d+(?:\.\d+)*\z/) == nil
        raise "Could not generate proper version format".red
    end

    plists = ["FhirR4/Sources/Info.plist", "FhirStu3/Tests/Info.plist", "Data4LifeFHIRCore/Info.plist"]
    plists.each { |path|
      update_info_plist(
        xcodeproj: "#{projectSTU3}.xcodeproj",
        plist_path: path,
        block: proc do |plist|
          plist["CFBundleShortVersionString"] = numberOnlyVersion
        end
      )
    }
  end

  desc "Update readme badge"
  lane :update_badge do |options|
    if options[:version] == nil
      UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end
    
    Dir.chdir("..") do
      sh "curl https://img.shields.io/badge/Release-#{options[:version]}-blueviolet.svg -s -o assets/images/badge-release-latest.svg"
    end 
  end 

  desc "Build any project xcframework"
  lane :build_xcframework do |options|
    if options[:schemeName] == nil
        raise "Missing scheme name".red
    end
    if options[:frameworkName] == nil
        raise "Missing framework name".red
    end
    if options[:outputPath] == nil
        raise "Missing output path".red
    end

    Dir.chdir("..") do
      root = Dir.pwd
      configuration = "Release"
      buildPath = "xcbuild"

      schemeName = options[:schemeName]
      frameworkName = options[:frameworkName]
      outputPath = options[:outputPath]

      if File.exist?(buildPath)
        sh "rm -rf #{buildPath}"
      end
      if File.exist?(outputPath)
        sh "rm -rf #{outputPath}"
      end

      sh "rm -rf #{outputPath}"
      sh "xcodebuild archive -scheme #{schemeName} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{frameworkName}-iphonesimulator.xcarchive -destination 'generic/platform=iOS Simulator' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO"
      sh "xcodebuild archive -scheme #{schemeName} -configuration #{configuration} -archivePath #{buildPath}/#{configuration}/#{frameworkName}-iphoneos.xcarchive -destination 'generic/platform=iOS' SKIP_INSTALL=NO BUILD_LIBRARY_FOR_DISTRIBUTION=YES SWIFT_SERIALIZE_DEBUGGING_OPTIONS=NO"
      sh "xcodebuild -create-xcframework \
          -framework #{buildPath}/#{configuration}/#{frameworkName}-iphonesimulator.xcarchive/Products/Library/Frameworks/#{frameworkName}.framework \
          -framework #{buildPath}/#{configuration}/#{frameworkName}-iphoneos.xcarchive/Products/Library/Frameworks/#{frameworkName}.framework \
          -output #{outputPath}"
    end
  end

  desc "Upload to a github release draft"
  lane :create_github_draft do |options|

    if options[:version] == nil
      UI.user_error!("Please add required parameter version (eg. version:\"1.0.0\"")
    end

    if options[:api_token] == nil
      UI.user_error!("Please add required parameter api_token (eg. api_token:\"xxxxxxxxxx\"")
    end

    changelog = options[:changelog]
    if changelog == nil
       changelog = "### #{version}"
    end

    version = options[:version]
    apiToken = options[:api_token]

    set_github_release(
      repository_name: repository,
      api_token: apiToken,
      name: version,
      tag_name: version,
      description: changelog,
      is_draft: true,
      upload_assets: [
        frameworkPath(projectCore, version),
        frameworkPath(projectSTU3, version),
        frameworkPath(projectR4, version)
      ]
    )
  end

  desc "Generate docs per version using Asciidoctor"
  lane :generate_docs do | options |
    if options[:version] == nil
        raise "Missing version".red
    end

    version = options[:version]
    arguments = "project-version=" + version
    input_path = "../asciidoc/index.adoc"
    output_folder_path = "../docs/" + version
    output_filename_path = "index.html"
    output_final_path = output_folder_path + "/" + output_filename_path

    sh "rm -rf #{output_folder_path}"
    sh "mkdir #{output_folder_path}"
    sh "bundle exec asciidoctor -b html5 -d book -o #{output_final_path} -a #{arguments} #{input_path} "
  end

  def frameworkPath(name, version)
     return "#{name}-xcframework-#{version}.zip"
  end

  def parseAndCheckChangelog(path, version)

    changelogData = File.read(path)

    changelogVersionsSeparator = "== link:{link-repository}/releases/tag/v"
    changelogVersion = version.delete_prefix("v")
    changelogSections = changelogData.split(changelogVersionsSeparator)
    currentVersionSectionIndex = changelogSections.index { |section| section.include?("[#{changelogVersion}]")}

    unless currentVersionSectionIndex
      return nil
    end

    changelog = "## #{version}\n" + changelogSections[currentVersionSectionIndex].lines[1..-1].join
    return changelog.gsub("=", "#")
  end

  def remove_checksums_from_package
      packageSwiftData = File.read("Package.swift")
      packageSwiftData = packageSwiftData.gsub(/checksum: \"[a-zA-Z0-9]+\"/,"")
      packageSwiftData = packageSwiftData.gsub(/(\n\s*\n)+/, "\n")
      File.write("Package.swift", packageSwiftData)
  end 

  def update_swift_package_file(name, repository, path)
    sh "swift package compute-checksum #{path}" do |status, result| 

      checksum = result.chop
      url = "https://d4l-ios-artifact-repository.s3.eu-central-1.amazonaws.com/#{s3_key(repository, path)}"

      packageSwiftData = File.read("Package.swift")
      packageSwiftData = packageSwiftData.gsub(/url: \"[a-zA-Z0-9:\-\/_.,\\()]+#{name}-xcframework[a-zA-Z0-9:\-\/_.,\\()]+\",/, "url: \"#{url}\",
            checksum: \"#{checksum}\"")
      File.write("Package.swift", packageSwiftData)
    end
  end 

  def upload_archive_to_s3(repository, path)
    sh "aws s3api put-object --bucket d4l-ios-artifact-repository --key #{s3_key(repository, path)} --body #{path}"
  end 

  def s3_key(repository, path)
    return "#{repository}/#{path}"
  end

  def current_git_branch()
    sh "git branch --show-current" do |status, result|
      return result.chop
    end 
  end
end
