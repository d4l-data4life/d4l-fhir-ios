// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Data4LifeFHIR
@_exported import Data4LifeFHIR
@_exported import Data4LifeFHIRCore
import Foundation
import Swift
public class AnyResource<T> : Swift.Decodable where T : Data4LifeFHIR.DomainResource {
  public var resource: T
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationIngredient {
  public static func with(name: Swift.String, value: Swift.Float, unit: Swift.String) -> (Data4LifeFHIR.MedicationIngredient, Data4LifeFHIR.Substance)
  public static func with(name: Swift.String, quantity: Data4LifeFHIR.Quantity) -> (Data4LifeFHIR.MedicationIngredient, Data4LifeFHIR.Substance)
}
extension ContactPoint {
  public static func with(url: Swift.String) -> Data4LifeFHIR.ContactPoint
  public static func with(phone: Swift.String) -> Data4LifeFHIR.ContactPoint
}
extension Reference {
  convenience public init(_ string: Swift.String)
  convenience public init(labName: Swift.String?)
}
extension Dosage {
  public static func with(value: Swift.Float, unit: Swift.String, when: Swift.String) -> Data4LifeFHIR.Dosage
  public static func with(quantity: Data4LifeFHIR.Quantity?, when: Swift.String?) -> Data4LifeFHIR.Dosage
}
extension Dosage {
  public func getValue() -> Swift.Float?
  public func getUnit() -> Swift.String?
  public func getWhen() -> Swift.String?
}
public typealias FhirStu3Resource = Data4LifeFHIR.DomainResource
extension DomainResource : Data4LifeFHIRCore.AnyFhirResource {
}
extension Identifier : Data4LifeFHIRCore.FhirIdentifierType {
  public var assignerString: Swift.String? {
    get
  }
  public var valueString: Swift.String? {
    get
  }
}
extension CustomIdentifiable where Self : Data4LifeFHIR.FhirStu3Resource {
  public func makeIdentifier(with id: Swift.String, partnerId: Swift.String) -> Data4LifeFHIRCore.FhirIdentifierType
}
extension DocumentReference : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension Questionnaire : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension Observation : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension DiagnosticReport : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension CarePlan : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension Organization : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension Practitioner : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension Patient : Data4LifeFHIRCore.CustomIdentifiable {
  public var customIdentifiers: [Data4LifeFHIRCore.FhirIdentifierType]? {
    get
    set
  }
}
extension Address {
  public static func with(street: Swift.String, postalCode: Swift.String, city: Swift.String) -> Data4LifeFHIR.Address
}
extension HumanName {
  public static func with(firstname: Swift.String, lastname: Swift.String, prefix: Swift.String? = nil, suffix: Swift.String? = nil) -> Data4LifeFHIR.HumanName
}
extension Identifier {
  convenience public init(identifier: Swift.String, partnerId: Swift.String? = nil)
}
@_inheritsConvenienceInitializers open class FHIRAbstractResource : Data4LifeFHIR.FHIRAbstractBase {
  public var _versionId: Swift.String?
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  override open func encode(to encoder: Swift.Encoder) throws
  required public init()
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public protocol FHIRPrimitive {
  var id: Swift.String? { get set }
  var extension_fhir: [Data4LifeFHIR.Extension]? { get set }
}
public struct Base64Binary : Data4LifeFHIR.FHIRPrimitive, Swift.ExpressibleByStringLiteral, Swift.CustomStringConvertible {
  public var value: Swift.String
  public var id: Swift.String?
  weak public var _owner: Data4LifeFHIR.FHIRAbstractBase?
  public var extension_fhir: [Data4LifeFHIR.Extension]?
  public init(value: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.Character)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public var description: Swift.String {
    get
  }
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.Character
}
extension Base64Binary : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Base64Binary : Swift.Equatable, Swift.Comparable {
  public static func == (lhs: Data4LifeFHIR.Base64Binary, rhs: Data4LifeFHIR.Base64Binary) -> Swift.Bool
  public static func < (lh: Data4LifeFHIR.Base64Binary, rh: Data4LifeFHIR.Base64Binary) -> Swift.Bool
}
open class FHIRAbstractBase : Swift.Codable, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  open class var resourceType: Swift.String {
    get
  }
  required public init()
  required public init(from decoder: Swift.Decoder) throws
  public subscript<T>(name: Swift.String) -> T? {
    get
  }
  public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  open var description: Swift.String {
    get
  }
  open var debugDescription: Swift.String {
    get
  }
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
}
extension FHIRAbstractBase : Swift.Equatable {
  public static func == (lhs: Data4LifeFHIR.FHIRAbstractBase, rhs: Data4LifeFHIR.FHIRAbstractBase) -> Swift.Bool
}
extension FHIRAbstractBase : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public struct FHIRDate {
  public var year: Swift.Int
  public var month: Swift.UInt8? {
    get
    set
  }
  public var day: Swift.UInt8? {
    get
    set
  }
  public var id: Swift.String?
  weak public var _owner: Data4LifeFHIR.FHIRAbstractBase?
  public var extension_fhir: [Data4LifeFHIR.Extension]?
  public static var today: Data4LifeFHIR.FHIRDate {
    get
  }
  public init(year: Swift.Int, month: Swift.UInt8?, day: Swift.UInt8?)
  public init?(string: Swift.String)
  public var nsDate: Foundation.Date {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func == (lhs: Data4LifeFHIR.FHIRDate, rhs: Data4LifeFHIR.FHIRDate) -> Swift.Bool
  public static func < (lhs: Data4LifeFHIR.FHIRDate, rhs: Data4LifeFHIR.FHIRDate) -> Swift.Bool
}
public struct FHIRTime {
  public var hour: Swift.UInt8 {
    get
    set
  }
  public var minute: Swift.UInt8 {
    get
    set
  }
  public var second: Swift.Double? {
    get
    set
  }
  public var tookSecondsFromString: Swift.String? {
    get
  }
  public var id: Swift.String?
  weak public var _owner: Data4LifeFHIR.FHIRAbstractBase?
  public var extension_fhir: [Data4LifeFHIR.Extension]?
  public static var now: Data4LifeFHIR.FHIRTime {
    get
  }
  public init(hour: Swift.UInt8, minute: Swift.UInt8, second: Swift.Double?, secondsFromString: Swift.String? = nil)
  public init?(string: Swift.String)
  public var nsDate: Foundation.Date {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func == (lhs: Data4LifeFHIR.FHIRTime, rhs: Data4LifeFHIR.FHIRTime) -> Swift.Bool
  public static func < (lhs: Data4LifeFHIR.FHIRTime, rhs: Data4LifeFHIR.FHIRTime) -> Swift.Bool
}
public struct DateTime {
  public var date: Data4LifeFHIR.FHIRDate
  public var time: Data4LifeFHIR.FHIRTime?
  public var timeZone: Foundation.TimeZone? {
    get
    set
  }
  public var id: Swift.String?
  weak public var _owner: Data4LifeFHIR.FHIRAbstractBase?
  public var extension_fhir: [Data4LifeFHIR.Extension]?
  public static var now: Data4LifeFHIR.DateTime {
    get
  }
  public init(date: Data4LifeFHIR.FHIRDate, time: Data4LifeFHIR.FHIRTime?, timeZone: Foundation.TimeZone?)
  public init?(string: Swift.String)
  public var nsDate: Foundation.Date {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func == (lhs: Data4LifeFHIR.DateTime, rhs: Data4LifeFHIR.DateTime) -> Swift.Bool
  public static func < (lhs: Data4LifeFHIR.DateTime, rhs: Data4LifeFHIR.DateTime) -> Swift.Bool
}
public struct Instant {
  public var date: Data4LifeFHIR.FHIRDate {
    get
    set
  }
  public var time: Data4LifeFHIR.FHIRTime {
    get
    set
  }
  public var timeZone: Foundation.TimeZone {
    get
    set
  }
  public var id: Swift.String?
  weak public var _owner: Data4LifeFHIR.FHIRAbstractBase?
  public var extension_fhir: [Data4LifeFHIR.Extension]?
  public static var now: Data4LifeFHIR.Instant {
    get
  }
  public init(date: Data4LifeFHIR.FHIRDate, time: Data4LifeFHIR.FHIRTime, timeZone: Foundation.TimeZone)
  public init?(string: Swift.String)
  public var nsDate: Foundation.Date {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func == (lhs: Data4LifeFHIR.Instant, rhs: Data4LifeFHIR.Instant) -> Swift.Bool
  public static func < (lhs: Data4LifeFHIR.Instant, rhs: Data4LifeFHIR.Instant) -> Swift.Bool
}
extension Instant {
  public static func fromHttpDate(_ httpDate: Swift.String) -> Data4LifeFHIR.Instant?
}
extension Date {
  public func fhir_asDate() -> Data4LifeFHIR.FHIRDate
  public func fhir_asTime() -> Data4LifeFHIR.FHIRTime
  public func fhir_asDateTime() -> Data4LifeFHIR.DateTime
  public func fhir_asInstant() -> Data4LifeFHIR.Instant
}
extension Scanner {
  public var fhir_isAtEnd: Swift.Bool {
    get
  }
  public func fhir_scanString(_ searchString: Swift.String) -> Swift.String?
  public func fhir_scanCharacters(from set: Foundation.CharacterSet) -> Swift.String?
  public func fhir_scanInt() -> Swift.Int?
}
@_inheritsConvenienceInitializers open class Coding : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Swift.String?
  public var display: Swift.String?
  public var system: Swift.String?
  public var userSelected: Swift.Bool?
  public var version: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Coding {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Timing : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Data4LifeFHIR.CodeableConcept?
  public var event: [Data4LifeFHIR.DateTime]?
  public var repeat_fhir: Data4LifeFHIR.TimingRepeat?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Timing {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class TimingRepeat : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var boundsDuration: Data4LifeFHIR.Duration?
  public var boundsPeriod: Data4LifeFHIR.Period?
  public var boundsRange: Data4LifeFHIR.Range?
  public var count: Swift.Int?
  public var countMax: Swift.Int?
  public var dayOfWeek: [Data4LifeFHIR.DaysOfWeek]?
  public var duration: Swift.Float?
  public var durationMax: Swift.Float?
  public var durationUnit: Swift.String?
  public var frequency: Swift.Int?
  public var frequencyMax: Swift.Int?
  public var offset: Swift.Int?
  public var period: Swift.Float?
  public var periodMax: Swift.Float?
  public var periodUnit: Swift.String?
  public var timeOfDay: [Data4LifeFHIR.FHIRTime]?
  public var when: [Swift.String]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension TimingRepeat {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Distance : Data4LifeFHIR.Quantity {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension Distance {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ContactPoint : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var period: Data4LifeFHIR.Period?
  public var rank: Swift.Int?
  public var system: Data4LifeFHIR.ContactPointSystem?
  public var use: Data4LifeFHIR.ContactPointUse?
  public var value: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ContactPoint {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Period : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var end: Data4LifeFHIR.DateTime?
  public var start: Data4LifeFHIR.DateTime?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Period {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Ratio : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var denominator: Data4LifeFHIR.Quantity?
  public var numerator: Data4LifeFHIR.Quantity?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Ratio {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Attachment : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var contentType: Swift.String?
  public var creation: Data4LifeFHIR.DateTime?
  public var data_fhir: Swift.String?
  public var hash: Swift.String?
  public var language: Swift.String?
  public var size: Swift.Int?
  public var title: Swift.String?
  public var url: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Attachment {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Address : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var city: Swift.String?
  public var country: Swift.String?
  public var district: Swift.String?
  public var line: [Swift.String]?
  public var period: Data4LifeFHIR.Period?
  public var postalCode: Swift.String?
  public var state: Swift.String?
  public var text: Swift.String?
  public var type: Data4LifeFHIR.AddressType?
  public var use: Data4LifeFHIR.AddressUse?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Address {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Quantity : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Swift.String?
  public var comparator: Data4LifeFHIR.QuantityComparator?
  public var system: Swift.String?
  public var unit: Swift.String?
  public var value: Swift.Float?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Quantity {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Element : Data4LifeFHIR.FHIRAbstractBase {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var extension_fhir: [Data4LifeFHIR.Extension]?
  public var id: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Element {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Range : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var high: Data4LifeFHIR.Quantity?
  public var low: Data4LifeFHIR.Quantity?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Range {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class HumanName : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var family: Swift.String?
  public var given: [Swift.String]?
  public var period: Data4LifeFHIR.Period?
  public var prefix: [Swift.String]?
  public var suffix: [Swift.String]?
  public var text: Swift.String?
  public var use: Data4LifeFHIR.NameUse?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension HumanName {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Signature : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var blob: Swift.String?
  public var contentType: Swift.String?
  public var onBehalfOfReference: Data4LifeFHIR.Reference?
  public var onBehalfOfUri: Swift.String?
  public var type: [Data4LifeFHIR.Coding]?
  public var when: Data4LifeFHIR.Instant?
  public var whoReference: Data4LifeFHIR.Reference?
  public var whoUri: Swift.String?
  convenience public init(type: [Data4LifeFHIR.Coding], when: Data4LifeFHIR.Instant, who: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Signature {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Money : Data4LifeFHIR.Quantity {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension Money {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class CodeableConcept : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var coding: [Data4LifeFHIR.Coding]?
  public var text: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension CodeableConcept {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Age : Data4LifeFHIR.Quantity {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension Age {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension CodeableConcept {
  convenience public init(_ string: Swift.String)
  convenience public init(code: Swift.String? = nil, display: Swift.String? = nil, system: Swift.String? = nil)
}
@_inheritsConvenienceInitializers open class Count : Data4LifeFHIR.Quantity {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension Count {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class SampledData : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var data_fhir: Swift.String?
  public var dimensions: Swift.Int?
  public var factor: Swift.Float?
  public var lowerLimit: Swift.Float?
  public var origin: Data4LifeFHIR.Quantity?
  public var period: Swift.Float?
  public var upperLimit: Swift.Float?
  convenience public init(data_fhir: Swift.String, dimensions: Swift.Int, origin: Data4LifeFHIR.Quantity, period: Swift.Float)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension SampledData {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension ObservationReferenceRange {
  public static func with(type: Data4LifeFHIR.CodeableConcept, lowValue: Swift.Float?, highValue: Swift.Float?, unit: Swift.String) -> Data4LifeFHIR.ObservationReferenceRange
  public static func with(type: Data4LifeFHIR.CodeableConcept, lowQuantity: Data4LifeFHIR.Quantity?, highQuantity: Data4LifeFHIR.Quantity?) -> Data4LifeFHIR.ObservationReferenceRange
}
extension ObservationReferenceRange {
  public func getType() -> Data4LifeFHIR.CodeableConcept?
  public func getLowValue() -> Swift.Float?
  public func getHighValue() -> Swift.Float?
  public func getUnit() -> Swift.String?
  public func getHighQuantity() -> Data4LifeFHIR.Quantity?
  public func getLowQuantity() -> Data4LifeFHIR.Quantity?
}
@_inheritsConvenienceInitializers open class Annotation : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var authorReference: Data4LifeFHIR.Reference?
  public var authorString: Swift.String?
  public var text: Swift.String?
  public var time: Data4LifeFHIR.DateTime?
  convenience public init(text: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Annotation {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Duration : Data4LifeFHIR.Quantity {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  required public init()
  required public init(from decoder: Swift.Decoder) throws
  override open func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension Duration {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Identifier : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var assigner: Data4LifeFHIR.Reference?
  public var period: Data4LifeFHIR.Period?
  public var system: Swift.String?
  public var type: Data4LifeFHIR.CodeableConcept?
  public var use: Data4LifeFHIR.IdentifierUse?
  public var value: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Identifier {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Narrative : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var div: Swift.String?
  public var status: Data4LifeFHIR.NarrativeStatus?
  convenience public init(div: Swift.String, status: Data4LifeFHIR.NarrativeStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Narrative {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Reference : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var display: Swift.String?
  public var identifier: Data4LifeFHIR.Identifier?
  public var reference: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Reference {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Meta : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var lastUpdated: Data4LifeFHIR.Instant?
  public var profile: [Swift.String]?
  public var security: [Data4LifeFHIR.Coding]?
  public var tag: [Data4LifeFHIR.Coding]?
  public var versionId: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Meta {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension Attachment {
  public static func with(title: Swift.String, creationDate: Data4LifeFHIR.DateTime, contentType: Swift.String, data: Foundation.Data) throws -> Data4LifeFHIR.Attachment
}
extension Attachment {
  public func getData() -> Foundation.Data?
  public func getTitle() -> Swift.String?
  public func getCreationDate() -> Data4LifeFHIR.DateTime?
  public func getContentType() -> Swift.String?
}
@_inheritsConvenienceInitializers open class Resource : Data4LifeFHIR.FHIRAbstractResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var id: Swift.String?
  public var implicitRules: Swift.String?
  public var language: Swift.String?
  public var meta: Data4LifeFHIR.Meta?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Resource {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Extension : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var url: Swift.String?
  public var valueAddress: Data4LifeFHIR.Address?
  public var valueAge: Data4LifeFHIR.Age?
  public var valueAnnotation: Data4LifeFHIR.Annotation?
  public var valueAttachment: Data4LifeFHIR.Attachment?
  public var valueBase64Binary: Swift.String?
  public var valueBoolean: Swift.Bool?
  public var valueCode: Swift.String?
  public var valueCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var valueCoding: Data4LifeFHIR.Coding?
  public var valueContactPoint: Data4LifeFHIR.ContactPoint?
  public var valueCount: Data4LifeFHIR.Count?
  public var valueDate: Data4LifeFHIR.FHIRDate?
  public var valueDateTime: Data4LifeFHIR.DateTime?
  public var valueDecimal: Swift.Float?
  public var valueDistance: Data4LifeFHIR.Distance?
  public var valueDuration: Data4LifeFHIR.Duration?
  public var valueHumanName: Data4LifeFHIR.HumanName?
  public var valueId: Swift.String?
  public var valueIdentifier: Data4LifeFHIR.Identifier?
  public var valueInstant: Data4LifeFHIR.Instant?
  public var valueInteger: Swift.Int?
  public var valueMarkdown: Swift.String?
  public var valueMeta: Data4LifeFHIR.Meta?
  public var valueMoney: Data4LifeFHIR.Money?
  public var valueOid: Foundation.URL?
  public var valuePeriod: Data4LifeFHIR.Period?
  public var valuePositiveInt: Swift.Int?
  public var valueQuantity: Data4LifeFHIR.Quantity?
  public var valueRange: Data4LifeFHIR.Range?
  public var valueRatio: Data4LifeFHIR.Ratio?
  public var valueReference: Data4LifeFHIR.Reference?
  public var valueSampledData: Data4LifeFHIR.SampledData?
  public var valueSignature: Data4LifeFHIR.Signature?
  public var valueString: Swift.String?
  public var valueTime: Data4LifeFHIR.FHIRTime?
  public var valueTiming: Data4LifeFHIR.Timing?
  public var valueUnsignedInt: Swift.Int?
  public var valueUri: Swift.String?
  convenience public init(url: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Extension {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public enum AbstractType : Swift.String, Swift.Codable {
  case type
  case any
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AccountStatus : Swift.String, Swift.Codable {
  case active
  case inactive
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionCardinalityBehavior : Swift.String, Swift.Codable {
  case single
  case multiple
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionConditionKind : Swift.String, Swift.Codable {
  case applicability
  case start
  case stop
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionGroupingBehavior : Swift.String, Swift.Codable {
  case visualGroup
  case logicalGroup
  case sentenceGroup
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionList : Swift.String, Swift.Codable {
  case cancel
  case poll
  case reprocess
  case status
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionParticipantType : Swift.String, Swift.Codable {
  case patient
  case practitioner
  case relatedPerson
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionPrecheckBehavior : Swift.String, Swift.Codable {
  case yes
  case no
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionRelationshipType : Swift.String, Swift.Codable {
  case beforeStart
  case before
  case beforeEnd
  case concurrentWithStart
  case concurrent
  case concurrentWithEnd
  case afterStart
  case after
  case afterEnd
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionRequiredBehavior : Swift.String, Swift.Codable {
  case must
  case could
  case mustUnlessDocumented
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionSelectionBehavior : Swift.String, Swift.Codable {
  case any
  case all
  case allOrNone
  case exactlyOne
  case atMostOne
  case oneOrMore
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActionType : Swift.String, Swift.Codable {
  case create
  case update
  case remove
  case fireEvent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ActivityDefinitionCategory : Swift.String, Swift.Codable {
  case treatment
  case education
  case assessment
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AddressType : Swift.String, Swift.Codable {
  case postal
  case physical
  case both
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AddressUse : Swift.String, Swift.Codable {
  case home
  case work
  case temp
  case old
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdministrativeGender : Swift.String, Swift.Codable {
  case male
  case female
  case other
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdverseEventCategory : Swift.String, Swift.Codable {
  case AE
  case PAE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdverseEventCausality : Swift.String, Swift.Codable {
  case causality1
  case causality2
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdverseEventCausalityAssessment : Swift.String, Swift.Codable {
  case assess1
  case assess2
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdverseEventCausalityMethod : Swift.String, Swift.Codable {
  case method1
  case method2
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdverseEventCausalityResult : Swift.String, Swift.Codable {
  case result1
  case result2
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdverseEventOutcome : Swift.String, Swift.Codable {
  case resolved
  case recovering
  case ongoing
  case resolvedWithSequelae
  case fatal
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdverseEventSeriousness : Swift.String, Swift.Codable {
  case mild
  case moderate
  case severe
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AggregationMode : Swift.String, Swift.Codable {
  case contained
  case referenced
  case bundled
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceCategory : Swift.String, Swift.Codable {
  case food
  case medication
  case environment
  case biologic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceCertainty : Swift.String, Swift.Codable {
  case unlikely
  case likely
  case confirmed
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceClinicalStatus : Swift.String, Swift.Codable {
  case active
  case inactive
  case resolved
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceCriticality : Swift.String, Swift.Codable {
  case low
  case high
  case unableToAssess
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceSeverity : Swift.String, Swift.Codable {
  case mild
  case moderate
  case severe
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceSubstanceExposureRisk : Swift.String, Swift.Codable {
  case knownReactionRisk
  case noKnownReactionRisk
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceType : Swift.String, Swift.Codable {
  case allergy
  case intolerance
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AllergyIntoleranceVerificationStatus : Swift.String, Swift.Codable {
  case unconfirmed
  case confirmed
  case refuted
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppointmentStatus : Swift.String, Swift.Codable {
  case proposed
  case pending
  case booked
  case arrived
  case fulfilled
  case cancelled
  case noshow
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AssertionDirectionType : Swift.String, Swift.Codable {
  case response
  case request
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AssertionOperatorType : Swift.String, Swift.Codable {
  case equals
  case notEquals
  case `in`
  case notIn
  case greaterThan
  case lessThan
  case empty
  case notEmpty
  case contains
  case notContains
  case eval
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AssertionResponseTypes : Swift.String, Swift.Codable {
  case okay
  case created
  case noContent
  case notModified
  case bad
  case forbidden
  case notFound
  case methodNotAllowed
  case conflict
  case gone
  case preconditionFailed
  case unprocessable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuditEventAction : Swift.String, Swift.Codable {
  case C
  case R
  case U
  case D
  case E
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BindingStrength : Swift.String, Swift.Codable {
  case required
  case extensible
  case preferred
  case example
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BundleType : Swift.String, Swift.Codable {
  case document
  case message
  case transaction
  case transactionResponse
  case batch
  case batchResponse
  case history
  case searchset
  case collection
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CapabilityStatementKind : Swift.String, Swift.Codable {
  case instance
  case capability
  case requirements
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CarePlanActivityStatus : Swift.String, Swift.Codable {
  case notStarted
  case scheduled
  case inProgress
  case onHold
  case completed
  case cancelled
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CarePlanIntent : Swift.String, Swift.Codable {
  case proposal
  case plan
  case order
  case option
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CarePlanStatus : Swift.String, Swift.Codable {
  case draft
  case active
  case suspended
  case completed
  case enteredInError
  case cancelled
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CareTeamCategory : Swift.String, Swift.Codable {
  case event
  case encounter
  case episode
  case longitudinal
  case condition
  case clinicalResearch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CareTeamStatus : Swift.String, Swift.Codable {
  case proposed
  case active
  case suspended
  case inactive
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChargeItemStatus : Swift.String, Swift.Codable {
  case planned
  case billable
  case notBillable
  case aborted
  case billed
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChoiceListOrientation : Swift.String, Swift.Codable {
  case horizontal
  case vertical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ClaimPayeeResourceType : Swift.String, Swift.Codable {
  case organization
  case patient
  case practitioner
  case relatedperson
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ClassificationOrContext : Swift.String, Swift.Codable {
  case classification
  case context
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ClinicalImpressionStatus : Swift.String, Swift.Codable {
  case draft
  case completed
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CodeSystemContentMode : Swift.String, Swift.Codable {
  case notPresent
  case example
  case fragment
  case complete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CodeSystemHierarchyMeaning : Swift.String, Swift.Codable {
  case groupedBy
  case isA
  case partOf
  case classifiedWith
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CommunicationCategory : Swift.String, Swift.Codable {
  case alert
  case notification
  case reminder
  case instruction
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CommunicationNotDoneReason : Swift.String, Swift.Codable {
  case unknown
  case systemError
  case invalidPhoneNumber
  case recipientUnavailable
  case familyObjection
  case patientObjection
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CompartmentType : Swift.String, Swift.Codable {
  case patient
  case encounter
  case relatedPerson
  case practitioner
  case device
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CompositeMeasureScoring : Swift.String, Swift.Codable {
  case opportunity
  case allOrNothing
  case linear
  case weighted
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CompositionAttestationMode : Swift.String, Swift.Codable {
  case personal
  case professional
  case legal
  case official
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CompositionStatus : Swift.String, Swift.Codable {
  case preliminary
  case final
  case amended
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConceptMapEquivalence : Swift.String, Swift.Codable {
  case relatedto
  case equivalent
  case equal
  case wider
  case subsumes
  case narrower
  case specializes
  case inexact
  case unmatched
  case disjoint
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConceptMapGroupUnmappedMode : Swift.String, Swift.Codable {
  case provided
  case fixed
  case otherMap
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConditionState : Swift.String, Swift.Codable {
  case active
  case inactive
  case resolved
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConditionVerificationStatus : Swift.String, Swift.Codable {
  case provisional
  case differential
  case confirmed
  case refuted
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConditionalDeleteStatus : Swift.String, Swift.Codable {
  case notSupported
  case single
  case multiple
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConditionalReadStatus : Swift.String, Swift.Codable {
  case notSupported
  case modifiedSince
  case notMatch
  case fullSupport
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConformanceExpectation : Swift.String, Swift.Codable {
  case SHALL
  case SHOULD
  case MAY
  case SHOULDNOT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentDataMeaning : Swift.String, Swift.Codable {
  case instance
  case related
  case dependents
  case authoredby
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentExceptType : Swift.String, Swift.Codable {
  case deny
  case permit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConsentState : Swift.String, Swift.Codable {
  case draft
  case proposed
  case active
  case rejected
  case inactive
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConstraintSeverity : Swift.String, Swift.Codable {
  case error
  case warning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContactPointSystem : Swift.String, Swift.Codable {
  case phone
  case fax
  case email
  case pager
  case url
  case sms
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContactPointUse : Swift.String, Swift.Codable {
  case home
  case work
  case temp
  case old
  case mobile
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentType : Swift.String, Swift.Codable {
  case xml
  case json
  case ttl
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContributorType : Swift.String, Swift.Codable {
  case author
  case editor
  case reviewer
  case endorser
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CopyNumberEvent : Swift.String, Swift.Codable {
  case amp
  case del
  case lof
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DataAbsentReason : Swift.String, Swift.Codable {
  case unknown
  case asked
  case temp
  case notAsked
  case masked
  case unsupported
  case astext
  case error
  case naN
  case notPerformed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DataElementStringency : Swift.String, Swift.Codable {
  case comparable
  case fullySpecified
  case equivalent
  case convertable
  case scaleable
  case flexible
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DataType : Swift.String, Swift.Codable {
  case address
  case age
  case annotation
  case attachment
  case backboneElement
  case codeableConcept
  case coding
  case contactDetail
  case contactPoint
  case contributor
  case count
  case dataRequirement
  case distance
  case dosage
  case duration
  case element
  case elementDefinition
  case extension_fhir
  case humanName
  case identifier
  case meta
  case money
  case narrative
  case parameterDefinition
  case period
  case quantity
  case range
  case ratio
  case reference
  case relatedArtifact
  case sampledData
  case signature
  case simpleQuantity
  case timing
  case triggerDefinition
  case usageContext
  case base64Binary
  case boolean
  case code
  case date
  case dateTime
  case decimal
  case id
  case instant
  case integer
  case markdown
  case oid
  case positiveInt
  case string
  case time
  case unsignedInt
  case uri
  case uuid
  case xhtml
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DaysOfWeek : Swift.String, Swift.Codable {
  case mon
  case tue
  case wed
  case thu
  case fri
  case sat
  case sun
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DefinitionStatus : Swift.String, Swift.Codable {
  case draft
  case active
  case withdrawn
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DefinitionTopic : Swift.String, Swift.Codable {
  case treatment
  case education
  case assessment
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DetectedIssueSeverity : Swift.String, Swift.Codable {
  case high
  case moderate
  case low
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceComponentOperationalStatus : Swift.String, Swift.Codable {
  case off
  case on
  case notReady
  case standby
  case transducDiscon
  case hwDiscon
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceComponentParameterGroup : Swift.String, Swift.Codable {
  case haemodynamic
  case ecg
  case respiratory
  case ventilation
  case neurological
  case drugDelivery
  case fluidChemistry
  case bloodChemistry
  case miscellaneous
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceMetricCalibrationState : Swift.String, Swift.Codable {
  case notCalibrated
  case calibrationRequired
  case calibrated
  case unspecified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceMetricCalibrationType : Swift.String, Swift.Codable {
  case unspecified
  case offset
  case gain
  case twoPoint
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceMetricCategory : Swift.String, Swift.Codable {
  case measurement
  case setting
  case calculation
  case unspecified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceMetricColor : Swift.String, Swift.Codable {
  case black
  case red
  case green
  case yellow
  case blue
  case magenta
  case cyan
  case white
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceMetricOperationalStatus : Swift.String, Swift.Codable {
  case on
  case off
  case standby
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceSpecificationSpecType : Swift.String, Swift.Codable {
  case unspecified
  case serialNumber
  case partNumber
  case hardwareRevision
  case softwareRevision
  case firmwareRevision
  case protocolRevision
  case gmdn
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DeviceUseStatementStatus : Swift.String, Swift.Codable {
  case active
  case completed
  case enteredInError
  case intended
  case stopped
  case onHold
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DiagnosticReportStatus : Swift.String, Swift.Codable {
  case registered
  case partial
  case preliminary
  case final
  case amended
  case corrected
  case appended
  case cancelled
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DigitalMediaType : Swift.String, Swift.Codable {
  case photo
  case video
  case audio
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DiscriminatorType : Swift.String, Swift.Codable {
  case value
  case exists
  case pattern
  case type
  case profile
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DocumentMode : Swift.String, Swift.Codable {
  case producer
  case consumer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DocumentReferenceStatus : Swift.String, Swift.Codable {
  case current
  case superseded
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DocumentRelationshipType : Swift.String, Swift.Codable {
  case replaces
  case transforms
  case signs
  case appends
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EncounterLocationStatus : Swift.String, Swift.Codable {
  case planned
  case active
  case reserved
  case completed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EncounterStatus : Swift.String, Swift.Codable {
  case planned
  case arrived
  case triaged
  case inProgress
  case onleave
  case finished
  case cancelled
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EndpointStatus : Swift.String, Swift.Codable {
  case active
  case suspended
  case error
  case off
  case enteredInError
  case test
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EpisodeOfCareStatus : Swift.String, Swift.Codable {
  case planned
  case waitlist
  case active
  case onhold
  case finished
  case cancelled
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EventCapabilityMode : Swift.String, Swift.Codable {
  case sender
  case receiver
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EventStatus : Swift.String, Swift.Codable {
  case preparation
  case inProgress
  case suspended
  case aborted
  case completed
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EventTiming : Swift.String, Swift.Codable {
  case MORN
  case AFT
  case EVE
  case NIGHT
  case PHS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExplanationOfBenefitStatus : Swift.String, Swift.Codable {
  case active
  case cancelled
  case draft
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExtensionContext : Swift.String, Swift.Codable {
  case resource
  case datatype
  case extension_fhir
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FHIRDefinedConceptProperties : Swift.String, Swift.Codable {
  case inactive
  case deprecated
  case notSelectable
  case parent
  case child
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FHIRDeviceStatus : Swift.String, Swift.Codable {
  case active
  case inactive
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FHIRRestfulInteractions : Swift.String, Swift.Codable {
  case read
  case vread
  case update
  case patch
  case delete
  case history
  case historyInstance
  case historyType
  case historySystem
  case create
  case search
  case searchType
  case searchSystem
  case capabilities
  case transaction
  case batch
  case operation
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FHIRSubstanceStatus : Swift.String, Swift.Codable {
  case active
  case inactive
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FamilyHistoryNotDoneReason : Swift.String, Swift.Codable {
  case subjectUnknown
  case withheld
  case unableToObtain
  case deferred
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FamilyHistoryStatus : Swift.String, Swift.Codable {
  case partial
  case completed
  case enteredInError
  case healthUnknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FilterOperator : Swift.String, Swift.Codable {
  case eq
  case isA
  case descendentOf
  case isNotA
  case regex
  case `in`
  case notIn
  case generalizes
  case exists
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FlagStatus : Swift.String, Swift.Codable {
  case active
  case inactive
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GoalAcceptanceStatus : Swift.String, Swift.Codable {
  case agree
  case disagree
  case pending
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GoalRelationshipType : Swift.String, Swift.Codable {
  case predecessor
  case successor
  case replacement
  case milestone
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GoalStatus : Swift.String, Swift.Codable {
  case proposed
  case accepted
  case planned
  case inProgress
  case onTarget
  case aheadOfTarget
  case behindTarget
  case sustaining
  case achieved
  case onHold
  case cancelled
  case enteredInError
  case rejected
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GraphCompartmentRule : Swift.String, Swift.Codable {
  case identical
  case matching
  case different
  case custom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GroupType : Swift.String, Swift.Codable {
  case person
  case animal
  case practitioner
  case device
  case medication
  case substance
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GuidanceResponseStatus : Swift.String, Swift.Codable {
  case success
  case dataRequested
  case dataRequired
  case inProgress
  case failure
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GuideDependencyType : Swift.String, Swift.Codable {
  case reference
  case inclusion
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum GuidePageKind : Swift.String, Swift.Codable {
  case page
  case example
  case list
  case include
  case directory
  case dictionary
  case toc
  case resource
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HL7Workgroup : Swift.String, Swift.Codable {
  case cbcc
  case cds
  case cqi
  case cg
  case dev
  case ehr
  case fhir
  case fm
  case hsi
  case ii
  case inm
  case its
  case oo
  case pa
  case pc
  case pher
  case phx
  case rcrim
  case sd
  case sec
  case us
  case vocab
  case aid
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HTTPVerb : Swift.String, Swift.Codable {
  case GET
  case POST
  case PUT
  case DELETE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HumanNameAssemblyOrder : Swift.String, Swift.Codable {
  case NL1
  case NL2
  case NL3
  case NL4
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IdentifierUse : Swift.String, Swift.Codable {
  case usual
  case official
  case temp
  case secondary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IdentityAssuranceLevel : Swift.String, Swift.Codable {
  case level1
  case level2
  case level3
  case level4
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ImplantStatus : Swift.String, Swift.Codable {
  case functional
  case nonFunctional
  case disabled
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IssueSeverity : Swift.String, Swift.Codable {
  case fatal
  case error
  case warning
  case information
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IssueType : Swift.String, Swift.Codable {
  case invalid
  case structure
  case required
  case value
  case invariant
  case security
  case login
  case unknown
  case expired
  case forbidden
  case suppressed
  case processing
  case notSupported
  case duplicate
  case notFound
  case tooLong
  case codeInvalid
  case extension_fhir
  case tooCostly
  case businessRule
  case conflict
  case incomplete
  case transient
  case lockError
  case noStore
  case exception
  case timeout
  case throttled
  case informational
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LibraryType : Swift.String, Swift.Codable {
  case logicLibrary
  case modelDefinition
  case assetCollection
  case moduleDefinition
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LinkType : Swift.String, Swift.Codable {
  case replacedBy
  case replaces
  case refer
  case seealso
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LinkageType : Swift.String, Swift.Codable {
  case source
  case alternate
  case historical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ListMode : Swift.String, Swift.Codable {
  case working
  case snapshot
  case changes
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ListStatus : Swift.String, Swift.Codable {
  case current
  case retired
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LocationMode : Swift.String, Swift.Codable {
  case instance
  case kind
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LocationStatus : Swift.String, Swift.Codable {
  case active
  case suspended
  case inactive
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MatchGrade : Swift.String, Swift.Codable {
  case certain
  case probable
  case possible
  case certainlyNot
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MaxOccurs : Swift.String, Swift.Codable {
  case max
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeasmntPrinciple : Swift.String, Swift.Codable {
  case other
  case chemical
  case electrical
  case impedance
  case nuclear
  case optical
  case thermal
  case biological
  case mechanical
  case acoustical
  case manual
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeasureDataUsage : Swift.String, Swift.Codable {
  case supplementalData
  case riskAdjustmentFactor
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeasurePopulationType : Swift.String, Swift.Codable {
  case initialPopulation
  case numerator
  case numeratorExclusion
  case denominator
  case denominatorExclusion
  case denominatorException
  case measurePopulation
  case measurePopulationExclusion
  case measureObservation
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeasureReportStatus : Swift.String, Swift.Codable {
  case complete
  case pending
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeasureReportType : Swift.String, Swift.Codable {
  case individual
  case patientList
  case summary
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeasureScoring : Swift.String, Swift.Codable {
  case proportion
  case ratio
  case continuousVariable
  case cohort
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MeasureType : Swift.String, Swift.Codable {
  case process
  case outcome
  case structure
  case patientReportedOutcome
  case composite
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationAdministrationCategory : Swift.String, Swift.Codable {
  case inpatient
  case outpatient
  case community
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationAdministrationStatus : Swift.String, Swift.Codable {
  case inProgress
  case onHold
  case completed
  case enteredInError
  case stopped
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationContainer : Swift.String, Swift.Codable {
  case ampoule
  case bottle
  case box
  case cartridge
  case specimenContainer
  case tube
  case unitdose
  case vial
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationDispenseCategory : Swift.String, Swift.Codable {
  case inpatient
  case outpatient
  case community
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationDispenseStatus : Swift.String, Swift.Codable {
  case preparation
  case inProgress
  case onHold
  case completed
  case enteredInError
  case stopped
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationRequestCategory : Swift.String, Swift.Codable {
  case inpatient
  case outpatient
  case community
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationRequestIntent : Swift.String, Swift.Codable {
  case proposal
  case plan
  case order
  case instanceOrder
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationRequestPriority : Swift.String, Swift.Codable {
  case routine
  case urgent
  case stat
  case asap
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationRequestStatus : Swift.String, Swift.Codable {
  case active
  case onHold
  case cancelled
  case completed
  case enteredInError
  case stopped
  case draft
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationStatementCategory : Swift.String, Swift.Codable {
  case inpatient
  case outpatient
  case community
  case patientspecified
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationStatementStatus : Swift.String, Swift.Codable {
  case active
  case completed
  case enteredInError
  case intended
  case stopped
  case onHold
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationStatementTaken : Swift.String, Swift.Codable {
  case Y
  case N
  case unk
  case na
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MedicationStatus : Swift.String, Swift.Codable {
  case active
  case inactive
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MessageEvent : Swift.String, Swift.Codable {
  case codeSystemExpand
  case medicationAdministrationComplete
  case medicationAdministrationNullification
  case medicationAdministrationRecording
  case medicationAdministrationUpdate
  case adminNotify
  case communicationRequest
  case diagnosticreportProvide
  case observationProvide
  case patientLink
  case patientUnlink
  case valuesetExpand
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MessageSignificanceCategory : Swift.String, Swift.Codable {
  case consequence
  case currency
  case notification
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MessageTransport : Swift.String, Swift.Codable {
  case http
  case ftp
  case mllp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MessageheaderResponseRequest : Swift.String, Swift.Codable {
  case always
  case onError
  case never
  case onSuccess
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NHINPurposeOfUse : Swift.String, Swift.Codable {
  case TREATMENT
  case PAYMENT
  case OPERATIONS
  case SYSADMIN
  case FRAUD
  case PSYCHOTHERAPY
  case TRAINING
  case LEGAL
  case MARKETING
  case DIRECTORY
  case FAMILY
  case PRESENT
  case EMERGENCY
  case DISASTER
  case PUBLICHEALTH
  case ABUSE
  case OVERSIGHT
  case JUDICIAL
  case LAW
  case DECEASED
  case DONATION
  case RESEARCH
  case THREAT
  case GOVERNMENT
  case WORKERSCOMP
  case COVERAGE
  case REQUEST
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NameUse : Swift.String, Swift.Codable {
  case usual
  case official
  case temp
  case nickname
  case anonymous
  case old
  case maiden
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NamingSystemIdentifierType : Swift.String, Swift.Codable {
  case oid
  case uuid
  case uri
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NamingSystemType : Swift.String, Swift.Codable {
  case codesystem
  case identifier
  case root
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NarrativeStatus : Swift.String, Swift.Codable {
  case generated
  case extensions
  case additional
  case empty
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NoteType : Swift.String, Swift.Codable {
  case display
  case print
  case printoper
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NutritionOrderStatus : Swift.String, Swift.Codable {
  case proposed
  case draft
  case planned
  case requested
  case active
  case onHold
  case completed
  case cancelled
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ObservationRelationshipType : Swift.String, Swift.Codable {
  case hasMember
  case derivedFrom
  case sequelTo
  case replaces
  case qualifiedBy
  case interferedBy
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ObservationStatus : Swift.String, Swift.Codable {
  case registered
  case preliminary
  case final
  case amended
  case corrected
  case cancelled
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OperationKind : Swift.String, Swift.Codable {
  case operation
  case query
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OperationOutcomeCodes : Swift.String, Swift.Codable {
  case MSG_AUTH_REQUIRED
  case MSG_BAD_FORMAT
  case MSG_BAD_SYNTAX
  case MSG_CANT_PARSE_CONTENT
  case MSG_CANT_PARSE_ROOT
  case MSG_CREATED
  case MSG_DATE_FORMAT
  case MSG_DELETED
  case MSG_DELETED_DONE
  case MSG_DELETED_ID
  case MSG_DUPLICATE_ID
  case MSG_ERROR_PARSING
  case MSG_ID_INVALID
  case MSG_ID_TOO_LONG
  case MSG_INVALID_ID
  case MSG_JSON_OBJECT
  case MSG_LOCAL_FAIL
  case MSG_NO_MATCH
  case MSG_NO_EXIST
  case MSG_NO_MODULE
  case MSG_NO_SUMMARY
  case MSG_OP_NOT_ALLOWED
  case MSG_PARAM_CHAINED
  case MSG_PARAM_NO_REPEAT
  case MSG_PARAM_UNKNOWN
  case MSG_PARAM_INVALID
  case MSG_PARAM_MODIFIER_INVALID
  case MSG_RESOURCE_EXAMPLE_PROTECTED
  case MSG_RESOURCE_ID_FAIL
  case MSG_RESOURCE_NOT_ALLOWED
  case MSG_RESOURCE_REQUIRED
  case MSG_RESOURCE_ID_MISMATCH
  case MSG_RESOURCE_ID_MISSING
  case MSG_RESOURCE_TYPE_MISMATCH
  case MSG_SORT_UNKNOWN
  case MSG_TRANSACTION_DUPLICATE_ID
  case MSG_TRANSACTION_MISSING_ID
  case MSG_UNHANDLED_NODE_TYPE
  case MSG_UNKNOWN_CONTENT
  case MSG_UNKNOWN_OPERATION
  case MSG_UNKNOWN_TYPE
  case MSG_UPDATED
  case MSG_VERSION_AWARE
  case MSG_VERSION_AWARE_CONFLICT
  case MSG_VERSION_AWARE_URL
  case MSG_WRONG_NS
  case SEARCH_MULTIPLE
  case UPDATE_MULTIPLE_MATCHES
  case DELETE_MULTIPLE_MATCHES
  case SEARCH_NONE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum OperationParameterUse : Swift.String, Swift.Codable {
  case `in`
  case out
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ParticipantRequired : Swift.String, Swift.Codable {
  case required
  case optional
  case informationOnly
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ParticipationStatus : Swift.String, Swift.Codable {
  case accepted
  case declined
  case tentative
  case needsAction
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PlanDefinitionType : Swift.String, Swift.Codable {
  case orderSet
  case protocol_fhir
  case ecaRule
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PropertyRepresentation : Swift.String, Swift.Codable {
  case xmlAttr
  case xmlText
  case typeAttr
  case cdaText
  case xhtml
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PropertyType : Swift.String, Swift.Codable {
  case code
  case coding
  case string
  case integer
  case boolean
  case dateTime
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ProvenanceEntityRole : Swift.String, Swift.Codable {
  case derivation
  case revision
  case quotation
  case source
  case removal
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PublicationStatus : Swift.String, Swift.Codable {
  case draft
  case active
  case retired
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum QualityOfEvidenceRating : Swift.String, Swift.Codable {
  case high
  case moderate
  case low
  case veryLow
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum QualityType : Swift.String, Swift.Codable {
  case indel
  case snp
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum QuantityComparator : Swift.String, Swift.Codable {
  case lt
  case lte
  case gte
  case gt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum QuestionnaireItemType : Swift.String, Swift.Codable {
  case group
  case display
  case question
  case boolean
  case decimal
  case integer
  case date
  case dateTime
  case time
  case string
  case text
  case url
  case choice
  case openChoice
  case attachment
  case reference
  case quantity
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum QuestionnaireItemUsageMode : Swift.String, Swift.Codable {
  case captureDisplay
  case capture
  case display
  case displayNonEmpty
  case captureDisplayNonEmpty
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum QuestionnaireResponseStatus : Swift.String, Swift.Codable {
  case inProgress
  case completed
  case amended
  case enteredInError
  case stopped
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ReferenceHandlingPolicy : Swift.String, Swift.Codable {
  case literal
  case logical
  case resolves
  case enforced
  case local
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ReferenceVersionRules : Swift.String, Swift.Codable {
  case either
  case independent
  case specific
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ReferralMethod : Swift.String, Swift.Codable {
  case fax
  case phone
  case elec
  case semail
  case mail
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RelatedArtifactType : Swift.String, Swift.Codable {
  case documentation
  case justification
  case citation
  case predecessor
  case successor
  case derivedFrom
  case dependsOn
  case composedOf
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RepositoryType : Swift.String, Swift.Codable {
  case directlink
  case openapi
  case login
  case oauth
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RequestIntent : Swift.String, Swift.Codable {
  case proposal
  case plan
  case order
  case originalOrder
  case reflexOrder
  case fillerOrder
  case instanceOrder
  case option
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RequestPriority : Swift.String, Swift.Codable {
  case routine
  case urgent
  case asap
  case stat
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RequestStatus : Swift.String, Swift.Codable {
  case draft
  case active
  case suspended
  case cancelled
  case completed
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResearchStudyStatus : Swift.String, Swift.Codable {
  case draft
  case inProgress
  case suspended
  case stopped
  case completed
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResearchSubjectStatus : Swift.String, Swift.Codable {
  case candidate
  case enrolled
  case active
  case suspended
  case withdrawn
  case completed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResourceTypeLink : Swift.String, Swift.Codable {
  case organization
  case patient
  case practitioner
  case relatedperson
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResourceValidationMode : Swift.String, Swift.Codable {
  case create
  case update
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResourceVersionPolicy : Swift.String, Swift.Codable {
  case noVersion
  case versioned
  case versionedUpdate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ResponseType : Swift.String, Swift.Codable {
  case ok
  case transientError
  case fatalError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RestfulCapabilityMode : Swift.String, Swift.Codable {
  case client
  case server
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RestfulSecurityService : Swift.String, Swift.Codable {
  case oAuth
  case sMARTOnFHIR
  case NTLM
  case basic
  case kerberos
  case certificates
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SearchComparator : Swift.String, Swift.Codable {
  case eq
  case ne
  case gt
  case lt
  case ge
  case le
  case sa
  case eb
  case ap
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SearchEntryMode : Swift.String, Swift.Codable {
  case match
  case include
  case outcome
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SearchModifierCode : Swift.String, Swift.Codable {
  case missing
  case exact
  case contains
  case not
  case text
  case `in`
  case notIn
  case below
  case above
  case type
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SearchParamType : Swift.String, Swift.Codable {
  case number
  case date
  case string
  case token
  case reference
  case composite
  case quantity
  case uri
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SequenceStatus : Swift.String, Swift.Codable {
  case positive
  case negative
  case absent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SequenceType : Swift.String, Swift.Codable {
  case aa
  case dna
  case rna
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ServiceProvisionConditions : Swift.String, Swift.Codable {
  case free
  case disc
  case cost
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SlicingRules : Swift.String, Swift.Codable {
  case closed
  case open
  case openAtEnd
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SlotStatus : Swift.String, Swift.Codable {
  case busy
  case free
  case busyUnavailable
  case busyTentative
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SpecialValues : Swift.String, Swift.Codable {
  case `true`
  case `false`
  case trace
  case sufficient
  case withdrawn
  case nilKnown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SpecimenStatus : Swift.String, Swift.Codable {
  case available
  case unavailable
  case unsatisfactory
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StrengthOfRecommendationRating : Swift.String, Swift.Codable {
  case strong
  case weak
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureDefinitionKind : Swift.String, Swift.Codable {
  case primitiveType
  case complexType
  case resource
  case logical
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureMapContextType : Swift.String, Swift.Codable {
  case type
  case variable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureMapGroupTypeMode : Swift.String, Swift.Codable {
  case none
  case types
  case typeAndTypes
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureMapInputMode : Swift.String, Swift.Codable {
  case source
  case target
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureMapModelMode : Swift.String, Swift.Codable {
  case source
  case queried
  case target
  case produced
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureMapSourceListMode : Swift.String, Swift.Codable {
  case first
  case not_first
  case last
  case not_last
  case only_one
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureMapTargetListMode : Swift.String, Swift.Codable {
  case first
  case share
  case last
  case collate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StructureMapTransform : Swift.String, Swift.Codable {
  case create
  case copy
  case truncate
  case escape
  case cast
  case append
  case translate
  case reference
  case dateOp
  case uuid
  case pointer
  case evaluate
  case cc
  case C
  case qty
  case id
  case cp
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SubscriptionChannelType : Swift.String, Swift.Codable {
  case restHook
  case websocket
  case email
  case sms
  case message
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SubscriptionStatus : Swift.String, Swift.Codable {
  case requested
  case active
  case error
  case off
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SubscriptionTag : Swift.String, Swift.Codable {
  case queued
  case delivered
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SupplyDeliveryStatus : Swift.String, Swift.Codable {
  case inProgress
  case completed
  case abandoned
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SupplyRequestReason : Swift.String, Swift.Codable {
  case patientCare
  case wardStock
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SupplyRequestStatus : Swift.String, Swift.Codable {
  case draft
  case active
  case suspended
  case cancelled
  case completed
  case enteredInError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SystemVersionProcessingMode : Swift.String, Swift.Codable {
  case `default`
  case check
  case override
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TaskPerformerType : Swift.String, Swift.Codable {
  case requester
  case dispatcher
  case scheduler
  case performer
  case monitor
  case manager
  case acquirer
  case reviewer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TaskStatus : Swift.String, Swift.Codable {
  case draft
  case requested
  case received
  case accepted
  case rejected
  case ready
  case cancelled
  case inProgress
  case onHold
  case failed
  case completed
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TestReportActionResult : Swift.String, Swift.Codable {
  case pass
  case skip
  case fail
  case warning
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TestReportParticipantType : Swift.String, Swift.Codable {
  case testEngine
  case client
  case server
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TestReportResult : Swift.String, Swift.Codable {
  case pass
  case fail
  case pending
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TestReportStatus : Swift.String, Swift.Codable {
  case completed
  case inProgress
  case waiting
  case stopped
  case enteredInError
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TestScriptRequestMethodCode : Swift.String, Swift.Codable {
  case delete
  case get
  case options
  case patch
  case post
  case put
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransactionMode : Swift.String, Swift.Codable {
  case notSupported
  case batch
  case transaction
  case both
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TriggerType : Swift.String, Swift.Codable {
  case namedEvent
  case periodic
  case dataAdded
  case dataModified
  case dataRemoved
  case dataAccessed
  case dataAccessEnded
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TypeDerivationRule : Swift.String, Swift.Codable {
  case specialization
  case constraint
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UDIEntryType : Swift.String, Swift.Codable {
  case barcode
  case rfid
  case manual
  case card
  case selfReported
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UnknownContentCode : Swift.String, Swift.Codable {
  case no
  case extensions
  case elements
  case both
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum UsageContextType : Swift.String, Swift.Codable {
  case gender
  case age
  case focus
  case user
  case workflow
  case task
  case venue
  case species
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Use : Swift.String, Swift.Codable {
  case complete
  case proposed
  case exploratory
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VisionBase : Swift.String, Swift.Codable {
  case up
  case down
  case `in`
  case out
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VisionEyes : Swift.String, Swift.Codable {
  case right
  case left
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum XPathUsageType : Swift.String, Swift.Codable {
  case normal
  case phonetic
  case nearby
  case distance
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers open class ContactDetail : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var name: Swift.String?
  public var telecom: [Data4LifeFHIR.ContactPoint]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ContactDetail {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class CareTeam : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var category: [Data4LifeFHIR.CodeableConcept]?
  public var context: Data4LifeFHIR.Reference?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var managingOrganization: [Data4LifeFHIR.Reference]?
  public var name: Swift.String?
  public var note: [Data4LifeFHIR.Annotation]?
  public var participant: [Data4LifeFHIR.CareTeamParticipant]?
  public var period: Data4LifeFHIR.Period?
  public var reasonCode: [Data4LifeFHIR.CodeableConcept]?
  public var reasonReference: [Data4LifeFHIR.Reference]?
  public var status: Data4LifeFHIR.CareTeamStatus?
  public var subject: Data4LifeFHIR.Reference?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension CareTeam {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class CareTeamParticipant : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var member: Data4LifeFHIR.Reference?
  public var onBehalfOf: Data4LifeFHIR.Reference?
  public var period: Data4LifeFHIR.Period?
  public var role: Data4LifeFHIR.CodeableConcept?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension CareTeamParticipant {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Dosage : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var additionalInstruction: [Data4LifeFHIR.CodeableConcept]?
  public var asNeededBoolean: Swift.Bool?
  public var asNeededCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var doseQuantity: Data4LifeFHIR.Quantity?
  public var doseRange: Data4LifeFHIR.Range?
  public var maxDosePerAdministration: Data4LifeFHIR.Quantity?
  public var maxDosePerLifetime: Data4LifeFHIR.Quantity?
  public var maxDosePerPeriod: Data4LifeFHIR.Ratio?
  public var method: Data4LifeFHIR.CodeableConcept?
  public var patientInstruction: Swift.String?
  public var rateQuantity: Data4LifeFHIR.Quantity?
  public var rateRange: Data4LifeFHIR.Range?
  public var rateRatio: Data4LifeFHIR.Ratio?
  public var route: Data4LifeFHIR.CodeableConcept?
  public var sequence: Swift.Int?
  public var site: Data4LifeFHIR.CodeableConcept?
  public var text: Swift.String?
  public var timing: Data4LifeFHIR.Timing?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Dosage {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Substance : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var category: [Data4LifeFHIR.CodeableConcept]?
  public var code: Data4LifeFHIR.CodeableConcept?
  public var description_fhir: Swift.String?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var ingredient: [Data4LifeFHIR.SubstanceIngredient]?
  public var instance: [Data4LifeFHIR.SubstanceInstance]?
  public var status: Data4LifeFHIR.FHIRSubstanceStatus?
  convenience public init(code: Data4LifeFHIR.CodeableConcept)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Substance {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class SubstanceIngredient : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var quantity: Data4LifeFHIR.Ratio?
  public var substanceCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var substanceReference: Data4LifeFHIR.Reference?
  convenience public init(substance: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension SubstanceIngredient {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class SubstanceInstance : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var expiry: Data4LifeFHIR.DateTime?
  public var identifier: Data4LifeFHIR.Identifier?
  public var quantity: Data4LifeFHIR.Quantity?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension SubstanceInstance {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Practitioner : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var active: Swift.Bool?
  public var address: [Data4LifeFHIR.Address]?
  public var birthDate: Data4LifeFHIR.FHIRDate?
  public var communication: [Data4LifeFHIR.CodeableConcept]?
  public var gender: Data4LifeFHIR.AdministrativeGender?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var name: [Data4LifeFHIR.HumanName]?
  public var photo: [Data4LifeFHIR.Attachment]?
  public var qualification: [Data4LifeFHIR.PractitionerQualification]?
  public var telecom: [Data4LifeFHIR.ContactPoint]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Practitioner {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class PractitionerQualification : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Data4LifeFHIR.CodeableConcept?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var issuer: Data4LifeFHIR.Reference?
  public var period: Data4LifeFHIR.Period?
  convenience public init(code: Data4LifeFHIR.CodeableConcept)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension PractitionerQualification {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Goal : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var addresses: [Data4LifeFHIR.Reference]?
  public var category: [Data4LifeFHIR.CodeableConcept]?
  public var description_fhir: Data4LifeFHIR.CodeableConcept?
  public var expressedBy: Data4LifeFHIR.Reference?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var note: [Data4LifeFHIR.Annotation]?
  public var outcomeCode: [Data4LifeFHIR.CodeableConcept]?
  public var outcomeReference: [Data4LifeFHIR.Reference]?
  public var priority: Data4LifeFHIR.CodeableConcept?
  public var startCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var startDate: Data4LifeFHIR.FHIRDate?
  public var status: Data4LifeFHIR.GoalStatus?
  public var statusDate: Data4LifeFHIR.FHIRDate?
  public var statusReason: Swift.String?
  public var subject: Data4LifeFHIR.Reference?
  public var target: Data4LifeFHIR.GoalTarget?
  convenience public init(description_fhir: Data4LifeFHIR.CodeableConcept, status: Data4LifeFHIR.GoalStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Goal {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class GoalTarget : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var detailCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var detailQuantity: Data4LifeFHIR.Quantity?
  public var detailRange: Data4LifeFHIR.Range?
  public var dueDate: Data4LifeFHIR.FHIRDate?
  public var dueDuration: Data4LifeFHIR.Duration?
  public var measure: Data4LifeFHIR.CodeableConcept?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension GoalTarget {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Condition : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var abatementAge: Data4LifeFHIR.Age?
  public var abatementBoolean: Swift.Bool?
  public var abatementDateTime: Data4LifeFHIR.DateTime?
  public var abatementPeriod: Data4LifeFHIR.Period?
  public var abatementRange: Data4LifeFHIR.Range?
  public var abatementString: Swift.String?
  public var assertedDate: Data4LifeFHIR.DateTime?
  public var asserter: Data4LifeFHIR.Reference?
  public var bodySite: [Data4LifeFHIR.CodeableConcept]?
  public var category: [Data4LifeFHIR.CodeableConcept]?
  public var clinicalStatus: Swift.String?
  public var code: Data4LifeFHIR.CodeableConcept?
  public var context: Data4LifeFHIR.Reference?
  public var evidence: [Data4LifeFHIR.ConditionEvidence]?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var note: [Data4LifeFHIR.Annotation]?
  public var onsetAge: Data4LifeFHIR.Age?
  public var onsetDateTime: Data4LifeFHIR.DateTime?
  public var onsetPeriod: Data4LifeFHIR.Period?
  public var onsetRange: Data4LifeFHIR.Range?
  public var onsetString: Swift.String?
  public var severity: Data4LifeFHIR.CodeableConcept?
  public var stage: Data4LifeFHIR.ConditionStage?
  public var subject: Data4LifeFHIR.Reference?
  public var verificationStatus: Data4LifeFHIR.ConditionVerificationStatus?
  convenience public init(subject: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Condition {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ConditionEvidence : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: [Data4LifeFHIR.CodeableConcept]?
  public var detail: [Data4LifeFHIR.Reference]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ConditionEvidence {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ConditionStage : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var assessment: [Data4LifeFHIR.Reference]?
  public var summary: Data4LifeFHIR.CodeableConcept?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ConditionStage {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSet : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var compose: Data4LifeFHIR.ValueSetCompose?
  public var contact: [Data4LifeFHIR.ContactDetail]?
  public var copyright: Swift.String?
  public var date: Data4LifeFHIR.DateTime?
  public var description_fhir: Swift.String?
  public var expansion: Data4LifeFHIR.ValueSetExpansion?
  public var experimental: Swift.Bool?
  public var extensible: Swift.Bool?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var immutable: Swift.Bool?
  public var jurisdiction: [Data4LifeFHIR.CodeableConcept]?
  public var name: Swift.String?
  public var publisher: Swift.String?
  public var purpose: Swift.String?
  public var status: Data4LifeFHIR.PublicationStatus?
  public var title: Swift.String?
  public var url: Swift.String?
  public var useContext: [Data4LifeFHIR.UsageContext]?
  public var version: Swift.String?
  convenience public init(status: Data4LifeFHIR.PublicationStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSet {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetCompose : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var exclude: [Data4LifeFHIR.ValueSetComposeInclude]?
  public var inactive: Swift.Bool?
  public var include: [Data4LifeFHIR.ValueSetComposeInclude]?
  public var lockedDate: Data4LifeFHIR.FHIRDate?
  convenience public init(include: [Data4LifeFHIR.ValueSetComposeInclude])
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetCompose {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetComposeInclude : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var concept: [Data4LifeFHIR.ValueSetComposeIncludeConcept]?
  public var filter: [Data4LifeFHIR.ValueSetComposeIncludeFilter]?
  public var system: Swift.String?
  public var valueSet: [Swift.String]?
  public var version: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetComposeInclude {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetComposeIncludeConcept : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Swift.String?
  public var designation: [Data4LifeFHIR.ValueSetComposeIncludeConceptDesignation]?
  public var display: Swift.String?
  convenience public init(code: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetComposeIncludeConcept {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetComposeIncludeConceptDesignation : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var language: Swift.String?
  public var use: Data4LifeFHIR.Coding?
  public var value: Swift.String?
  convenience public init(value: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetComposeIncludeConceptDesignation {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetComposeIncludeFilter : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var op: Data4LifeFHIR.FilterOperator?
  public var property: Swift.String?
  public var value: Swift.String?
  convenience public init(op: Data4LifeFHIR.FilterOperator, property: Swift.String, value: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetComposeIncludeFilter {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetExpansion : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var contains: [Data4LifeFHIR.ValueSetExpansionContains]?
  public var identifier: Swift.String?
  public var offset: Swift.Int?
  public var parameter: [Data4LifeFHIR.ValueSetExpansionParameter]?
  public var timestamp: Data4LifeFHIR.DateTime?
  public var total: Swift.Int?
  convenience public init(identifier: Swift.String, timestamp: Data4LifeFHIR.DateTime)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetExpansion {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetExpansionContains : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var abstract: Swift.Bool?
  public var code: Swift.String?
  public var contains: [Data4LifeFHIR.ValueSetExpansionContains]?
  public var designation: [Data4LifeFHIR.ValueSetComposeIncludeConceptDesignation]?
  public var display: Swift.String?
  public var inactive: Swift.Bool?
  public var system: Swift.String?
  public var version: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetExpansionContains {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ValueSetExpansionParameter : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var name: Swift.String?
  public var valueBoolean: Swift.Bool?
  public var valueCode: Swift.String?
  public var valueDecimal: Swift.Float?
  public var valueInteger: Swift.Int?
  public var valueString: Swift.String?
  public var valueUri: Swift.String?
  convenience public init(name: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ValueSetExpansionParameter {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Specimen : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var accessionIdentifier: Data4LifeFHIR.Identifier?
  public var collection: Data4LifeFHIR.SpecimenCollection?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var note: [Data4LifeFHIR.Annotation]?
  public var parent: [Data4LifeFHIR.Reference]?
  public var processing: [Data4LifeFHIR.SpecimenProcessing]?
  public var receivedTime: Data4LifeFHIR.DateTime?
  public var request: [Data4LifeFHIR.Reference]?
  public var specimenContainer: [Data4LifeFHIR.SpecimenContainer]?
  public var status: Data4LifeFHIR.SpecimenStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var type: Data4LifeFHIR.CodeableConcept?
  convenience public init(subject: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Specimen {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class SpecimenCollection : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var bodySite: Data4LifeFHIR.CodeableConcept?
  public var collectedDateTime: Data4LifeFHIR.DateTime?
  public var collectedPeriod: Data4LifeFHIR.Period?
  public var collector: Data4LifeFHIR.Reference?
  public var method: Data4LifeFHIR.CodeableConcept?
  public var quantity: Data4LifeFHIR.Quantity?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension SpecimenCollection {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class SpecimenContainer : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var additiveCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var additiveReference: Data4LifeFHIR.Reference?
  public var capacity: Data4LifeFHIR.Quantity?
  public var description_fhir: Swift.String?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var specimenQuantity: Data4LifeFHIR.Quantity?
  public var type: Data4LifeFHIR.CodeableConcept?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension SpecimenContainer {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class SpecimenProcessing : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var additive: [Data4LifeFHIR.Reference]?
  public var description_fhir: Swift.String?
  public var procedure: Data4LifeFHIR.CodeableConcept?
  public var timeDateTime: Data4LifeFHIR.DateTime?
  public var timePeriod: Data4LifeFHIR.Period?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension SpecimenProcessing {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Patient : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var active: Swift.Bool?
  public var address: [Data4LifeFHIR.Address]?
  public var animal: Data4LifeFHIR.PatientAnimal?
  public var birthDate: Data4LifeFHIR.FHIRDate?
  public var communication: [Data4LifeFHIR.PatientCommunication]?
  public var contact: [Data4LifeFHIR.PatientContact]?
  public var deceasedBoolean: Swift.Bool?
  public var deceasedDateTime: Data4LifeFHIR.DateTime?
  public var gender: Data4LifeFHIR.AdministrativeGender?
  public var generalPractitioner: [Data4LifeFHIR.Reference]?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var link: [Data4LifeFHIR.PatientLink]?
  public var managingOrganization: Data4LifeFHIR.Reference?
  public var maritalStatus: Data4LifeFHIR.CodeableConcept?
  public var multipleBirthBoolean: Swift.Bool?
  public var multipleBirthInteger: Swift.Int?
  public var name: [Data4LifeFHIR.HumanName]?
  public var photo: [Data4LifeFHIR.Attachment]?
  public var telecom: [Data4LifeFHIR.ContactPoint]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Patient {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class PatientAnimal : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var breed: Data4LifeFHIR.CodeableConcept?
  public var genderStatus: Data4LifeFHIR.CodeableConcept?
  public var species: Data4LifeFHIR.CodeableConcept?
  convenience public init(species: Data4LifeFHIR.CodeableConcept)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension PatientAnimal {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class PatientCommunication : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var language: Data4LifeFHIR.CodeableConcept?
  public var preferred: Swift.Bool?
  convenience public init(language: Data4LifeFHIR.CodeableConcept)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension PatientCommunication {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class PatientContact : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var address: Data4LifeFHIR.Address?
  public var gender: Data4LifeFHIR.AdministrativeGender?
  public var name: Data4LifeFHIR.HumanName?
  public var organization: Data4LifeFHIR.Reference?
  public var period: Data4LifeFHIR.Period?
  public var relationship: [Data4LifeFHIR.CodeableConcept]?
  public var telecom: [Data4LifeFHIR.ContactPoint]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension PatientContact {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class PatientLink : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var other: Data4LifeFHIR.Reference?
  public var type: Data4LifeFHIR.LinkType?
  convenience public init(other: Data4LifeFHIR.Reference, type: Data4LifeFHIR.LinkType)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension PatientLink {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Organization : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var active: Swift.Bool?
  public var address: [Data4LifeFHIR.Address]?
  public var alias: [Swift.String]?
  public var contact: [Data4LifeFHIR.OrganizationContact]?
  public var endpoint: [Data4LifeFHIR.Reference]?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var name: Swift.String?
  public var partOf: Data4LifeFHIR.Reference?
  public var telecom: [Data4LifeFHIR.ContactPoint]?
  public var type: [Data4LifeFHIR.CodeableConcept]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Organization {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class OrganizationContact : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var address: Data4LifeFHIR.Address?
  public var name: Data4LifeFHIR.HumanName?
  public var purpose: Data4LifeFHIR.CodeableConcept?
  public var telecom: [Data4LifeFHIR.ContactPoint]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension OrganizationContact {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Procedure : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var bodySite: [Data4LifeFHIR.CodeableConcept]?
  public var category: Data4LifeFHIR.CodeableConcept?
  public var code: Data4LifeFHIR.CodeableConcept?
  public var complication: [Data4LifeFHIR.CodeableConcept]?
  public var complicationDetail: [Data4LifeFHIR.Reference]?
  public var context: Data4LifeFHIR.Reference?
  public var definition: [Data4LifeFHIR.Reference]?
  public var focalDevice: [Data4LifeFHIR.ProcedureFocalDevice]?
  public var followUp: [Data4LifeFHIR.CodeableConcept]?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var location: Data4LifeFHIR.Reference?
  public var notDone: Swift.Bool?
  public var notDoneReason: Data4LifeFHIR.CodeableConcept?
  public var note: [Data4LifeFHIR.Annotation]?
  public var outcome: Data4LifeFHIR.CodeableConcept?
  public var partOf: [Data4LifeFHIR.Reference]?
  public var performedDateTime: Data4LifeFHIR.DateTime?
  public var performedPeriod: Data4LifeFHIR.Period?
  public var performer: [Data4LifeFHIR.ProcedurePerformer]?
  public var reasonCode: [Data4LifeFHIR.CodeableConcept]?
  public var reasonReference: [Data4LifeFHIR.Reference]?
  public var report: [Data4LifeFHIR.Reference]?
  public var status: Data4LifeFHIR.EventStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var usedCode: [Data4LifeFHIR.CodeableConcept]?
  public var usedReference: [Data4LifeFHIR.Reference]?
  convenience public init(status: Data4LifeFHIR.EventStatus, subject: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Procedure {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ProcedureFocalDevice : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var action: Data4LifeFHIR.CodeableConcept?
  public var manipulated: Data4LifeFHIR.Reference?
  convenience public init(manipulated: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ProcedureFocalDevice {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ProcedurePerformer : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var actor: Data4LifeFHIR.Reference?
  public var onBehalfOf: Data4LifeFHIR.Reference?
  public var role: Data4LifeFHIR.CodeableConcept?
  convenience public init(actor: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ProcedurePerformer {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Questionnaire : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var approvalDate: Data4LifeFHIR.FHIRDate?
  public var code: [Data4LifeFHIR.Coding]?
  public var contact: [Data4LifeFHIR.ContactDetail]?
  public var copyright: Swift.String?
  public var date: Data4LifeFHIR.DateTime?
  public var description_fhir: Swift.String?
  public var effectivePeriod: Data4LifeFHIR.Period?
  public var experimental: Swift.Bool?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var item: [Data4LifeFHIR.QuestionnaireItem]?
  public var jurisdiction: [Data4LifeFHIR.CodeableConcept]?
  public var lastReviewDate: Data4LifeFHIR.FHIRDate?
  public var name: Swift.String?
  public var publisher: Swift.String?
  public var purpose: Swift.String?
  public var status: Data4LifeFHIR.PublicationStatus?
  public var subjectType: [Swift.String]?
  public var title: Swift.String?
  public var url: Swift.String?
  public var useContext: [Data4LifeFHIR.UsageContext]?
  public var version: Swift.String?
  convenience public init(status: Data4LifeFHIR.PublicationStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Questionnaire {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class QuestionnaireItem : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: [Data4LifeFHIR.Coding]?
  public var definition: Swift.String?
  public var enableWhen: [Data4LifeFHIR.QuestionnaireItemEnableWhen]?
  public var initialAttachment: Data4LifeFHIR.Attachment?
  public var initialBoolean: Swift.Bool?
  public var initialCoding: Data4LifeFHIR.Coding?
  public var initialDate: Data4LifeFHIR.FHIRDate?
  public var initialDateTime: Data4LifeFHIR.DateTime?
  public var initialDecimal: Swift.Float?
  public var initialInteger: Swift.Int?
  public var initialQuantity: Data4LifeFHIR.Quantity?
  public var initialReference: Data4LifeFHIR.Reference?
  public var initialString: Swift.String?
  public var initialTime: Data4LifeFHIR.FHIRTime?
  public var initialUri: Swift.String?
  public var item: [Data4LifeFHIR.QuestionnaireItem]?
  public var linkId: Swift.String?
  public var maxLength: Swift.Int?
  public var option: [Data4LifeFHIR.QuestionnaireItemOption]?
  public var options: Data4LifeFHIR.Reference?
  public var prefix: Swift.String?
  public var readOnly: Swift.Bool?
  public var repeats: Swift.Bool?
  public var required: Swift.Bool?
  public var text: Swift.String?
  public var type: Data4LifeFHIR.QuestionnaireItemType?
  convenience public init(linkId: Swift.String, type: Data4LifeFHIR.QuestionnaireItemType)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension QuestionnaireItem {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class QuestionnaireItemEnableWhen : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var answerAttachment: Data4LifeFHIR.Attachment?
  public var answerBoolean: Swift.Bool?
  public var answerCoding: Data4LifeFHIR.Coding?
  public var answerDate: Data4LifeFHIR.FHIRDate?
  public var answerDateTime: Data4LifeFHIR.DateTime?
  public var answerDecimal: Swift.Float?
  public var answerInteger: Swift.Int?
  public var answerQuantity: Data4LifeFHIR.Quantity?
  public var answerReference: Data4LifeFHIR.Reference?
  public var answerString: Swift.String?
  public var answerTime: Data4LifeFHIR.FHIRTime?
  public var answerUri: Swift.String?
  public var hasAnswer: Swift.Bool?
  public var question: Swift.String?
  convenience public init(question: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension QuestionnaireItemEnableWhen {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class QuestionnaireItemOption : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var valueCoding: Data4LifeFHIR.Coding?
  public var valueDate: Data4LifeFHIR.FHIRDate?
  public var valueInteger: Swift.Int?
  public var valueString: Swift.String?
  public var valueTime: Data4LifeFHIR.FHIRTime?
  convenience public init(value: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension QuestionnaireItemOption {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Medication : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Data4LifeFHIR.CodeableConcept?
  public var form: Data4LifeFHIR.CodeableConcept?
  public var image: [Data4LifeFHIR.Attachment]?
  public var ingredient: [Data4LifeFHIR.MedicationIngredient]?
  public var isBrand: Swift.Bool?
  public var isOverTheCounter: Swift.Bool?
  public var manufacturer: Data4LifeFHIR.Reference?
  public var package: Data4LifeFHIR.MedicationPackage?
  public var status: Data4LifeFHIR.MedicationStatus?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Medication {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationIngredient : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var amount: Data4LifeFHIR.Ratio?
  public var isActive: Swift.Bool?
  public var itemCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var itemReference: Data4LifeFHIR.Reference?
  convenience public init(item: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationIngredient {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationPackage : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var batch: [Data4LifeFHIR.MedicationPackageBatch]?
  public var content: [Data4LifeFHIR.MedicationPackageContent]?
  public var specimenContainer: Data4LifeFHIR.CodeableConcept?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationPackage {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationPackageBatch : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var expirationDate: Data4LifeFHIR.DateTime?
  public var lotNumber: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationPackageBatch {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationPackageContent : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var amount: Data4LifeFHIR.Quantity?
  public var itemCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var itemReference: Data4LifeFHIR.Reference?
  convenience public init(item: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationPackageContent {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class CarePlan : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var activity: [Data4LifeFHIR.CarePlanActivity]?
  public var addresses: [Data4LifeFHIR.Reference]?
  public var author: [Data4LifeFHIR.Reference]?
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var careTeam: [Data4LifeFHIR.Reference]?
  public var category: [Data4LifeFHIR.CodeableConcept]?
  public var context: Data4LifeFHIR.Reference?
  public var definition: [Data4LifeFHIR.Reference]?
  public var description_fhir: Swift.String?
  public var goal: [Data4LifeFHIR.Reference]?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var intent: Data4LifeFHIR.CarePlanIntent?
  public var note: [Data4LifeFHIR.Annotation]?
  public var partOf: [Data4LifeFHIR.Reference]?
  public var period: Data4LifeFHIR.Period?
  public var replaces: [Data4LifeFHIR.Reference]?
  public var status: Data4LifeFHIR.CarePlanStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var supportingInfo: [Data4LifeFHIR.Reference]?
  public var title: Swift.String?
  convenience public init(intent: Data4LifeFHIR.CarePlanIntent, status: Data4LifeFHIR.CarePlanStatus, subject: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension CarePlan {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class CarePlanActivity : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var detail: Data4LifeFHIR.CarePlanActivityDetail?
  public var outcomeCodeableConcept: [Data4LifeFHIR.CodeableConcept]?
  public var outcomeReference: [Data4LifeFHIR.Reference]?
  public var progress: [Data4LifeFHIR.Annotation]?
  public var reference: Data4LifeFHIR.Reference?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension CarePlanActivity {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class CarePlanActivityDetail : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var category: Data4LifeFHIR.CodeableConcept?
  public var code: Data4LifeFHIR.CodeableConcept?
  public var dailyAmount: Data4LifeFHIR.Quantity?
  public var definition: Data4LifeFHIR.Reference?
  public var description_fhir: Swift.String?
  public var goal: [Data4LifeFHIR.Reference]?
  public var location: Data4LifeFHIR.Reference?
  public var performer: [Data4LifeFHIR.Reference]?
  public var productCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var productReference: Data4LifeFHIR.Reference?
  public var prohibited: Swift.Bool?
  public var quantity: Data4LifeFHIR.Quantity?
  public var reasonCode: [Data4LifeFHIR.CodeableConcept]?
  public var reasonReference: [Data4LifeFHIR.Reference]?
  public var scheduledPeriod: Data4LifeFHIR.Period?
  public var scheduledString: Swift.String?
  public var scheduledTiming: Data4LifeFHIR.Timing?
  public var status: Data4LifeFHIR.CarePlanActivityStatus?
  public var statusReason: Swift.String?
  convenience public init(status: Data4LifeFHIR.CarePlanActivityStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension CarePlanActivityDetail {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class StructureDefinition : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var abstract: Swift.Bool?
  public var baseDefinition: Swift.String?
  public var contact: [Data4LifeFHIR.ContactDetail]?
  public var context: [Swift.String]?
  public var contextInvariant: [Swift.String]?
  public var contextType: Data4LifeFHIR.ExtensionContext?
  public var copyright: Swift.String?
  public var date: Data4LifeFHIR.DateTime?
  public var derivation: Data4LifeFHIR.TypeDerivationRule?
  public var description_fhir: Swift.String?
  public var differential: Data4LifeFHIR.StructureDefinitionDifferential?
  public var experimental: Swift.Bool?
  public var fhirVersion: Swift.String?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var jurisdiction: [Data4LifeFHIR.CodeableConcept]?
  public var keyword: [Data4LifeFHIR.Coding]?
  public var kind: Data4LifeFHIR.StructureDefinitionKind?
  public var mapping: [Data4LifeFHIR.StructureDefinitionMapping]?
  public var name: Swift.String?
  public var publisher: Swift.String?
  public var purpose: Swift.String?
  public var snapshot: Data4LifeFHIR.StructureDefinitionSnapshot?
  public var status: Data4LifeFHIR.PublicationStatus?
  public var title: Swift.String?
  public var type: Swift.String?
  public var url: Swift.String?
  public var useContext: [Data4LifeFHIR.UsageContext]?
  public var version: Swift.String?
  convenience public init(abstract: Swift.Bool, kind: Data4LifeFHIR.StructureDefinitionKind, name: Swift.String, status: Data4LifeFHIR.PublicationStatus, type: Swift.String, url: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension StructureDefinition {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class StructureDefinitionDifferential : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var element: [Data4LifeFHIR.ElementDefinition]?
  convenience public init(element: [Data4LifeFHIR.ElementDefinition])
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension StructureDefinitionDifferential {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class StructureDefinitionMapping : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var comment: Swift.String?
  public var identity: Swift.String?
  public var name: Swift.String?
  public var uri: Swift.String?
  convenience public init(identity: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension StructureDefinitionMapping {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class StructureDefinitionSnapshot : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var element: [Data4LifeFHIR.ElementDefinition]?
  convenience public init(element: [Data4LifeFHIR.ElementDefinition])
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension StructureDefinitionSnapshot {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ReferralRequest : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var authoredOn: Data4LifeFHIR.DateTime?
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var context: Data4LifeFHIR.Reference?
  public var definition: [Data4LifeFHIR.Reference]?
  public var description_fhir: Swift.String?
  public var groupIdentifier: Data4LifeFHIR.Identifier?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var intent: Data4LifeFHIR.RequestIntent?
  public var note: [Data4LifeFHIR.Annotation]?
  public var occurrenceDateTime: Data4LifeFHIR.DateTime?
  public var occurrencePeriod: Data4LifeFHIR.Period?
  public var priority: Data4LifeFHIR.RequestPriority?
  public var reasonCode: [Data4LifeFHIR.CodeableConcept]?
  public var reasonReference: [Data4LifeFHIR.Reference]?
  public var recipient: [Data4LifeFHIR.Reference]?
  public var relevantHistory: [Data4LifeFHIR.Reference]?
  public var replaces: [Data4LifeFHIR.Reference]?
  public var requester: Data4LifeFHIR.ReferralRequestRequester?
  public var serviceRequested: [Data4LifeFHIR.CodeableConcept]?
  public var specialty: Data4LifeFHIR.CodeableConcept?
  public var status: Data4LifeFHIR.RequestStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var supportingInfo: [Data4LifeFHIR.Reference]?
  public var type: Data4LifeFHIR.CodeableConcept?
  convenience public init(intent: Data4LifeFHIR.RequestIntent, status: Data4LifeFHIR.RequestStatus, subject: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ReferralRequest {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ReferralRequestRequester : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var agent: Data4LifeFHIR.Reference?
  public var onBehalfOf: Data4LifeFHIR.Reference?
  convenience public init(agent: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ReferralRequestRequester {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class BackboneElement : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var modifierExtension: [Data4LifeFHIR.Extension]?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension BackboneElement {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinition : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var alias: [Swift.String]?
  public var base: Data4LifeFHIR.ElementDefinitionBase?
  public var binding: Data4LifeFHIR.ElementDefinitionBinding?
  public var code: [Data4LifeFHIR.Coding]?
  public var comment: Swift.String?
  public var condition: [Swift.String]?
  public var constraint: [Data4LifeFHIR.ElementDefinitionConstraint]?
  public var contentReference: Swift.String?
  public var defaultValueAddress: Data4LifeFHIR.Address?
  public var defaultValueAge: Data4LifeFHIR.Age?
  public var defaultValueAnnotation: Data4LifeFHIR.Annotation?
  public var defaultValueAttachment: Data4LifeFHIR.Attachment?
  public var defaultValueBase64Binary: Swift.String?
  public var defaultValueBoolean: Swift.Bool?
  public var defaultValueCode: Swift.String?
  public var defaultValueCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var defaultValueCoding: Data4LifeFHIR.Coding?
  public var defaultValueContactPoint: Data4LifeFHIR.ContactPoint?
  public var defaultValueCount: Data4LifeFHIR.Count?
  public var defaultValueDate: Data4LifeFHIR.FHIRDate?
  public var defaultValueDateTime: Data4LifeFHIR.DateTime?
  public var defaultValueDecimal: Swift.Float?
  public var defaultValueDistance: Data4LifeFHIR.Distance?
  public var defaultValueDuration: Data4LifeFHIR.Duration?
  public var defaultValueHumanName: Data4LifeFHIR.HumanName?
  public var defaultValueId: Swift.String?
  public var defaultValueIdentifier: Data4LifeFHIR.Identifier?
  public var defaultValueInstant: Data4LifeFHIR.Instant?
  public var defaultValueInteger: Swift.Int?
  public var defaultValueMarkdown: Swift.String?
  public var defaultValueMeta: Data4LifeFHIR.Meta?
  public var defaultValueMoney: Data4LifeFHIR.Money?
  public var defaultValueOid: Foundation.URL?
  public var defaultValuePeriod: Data4LifeFHIR.Period?
  public var defaultValuePositiveInt: Swift.Int?
  public var defaultValueQuantity: Data4LifeFHIR.Quantity?
  public var defaultValueRange: Data4LifeFHIR.Range?
  public var defaultValueRatio: Data4LifeFHIR.Ratio?
  public var defaultValueReference: Data4LifeFHIR.Reference?
  public var defaultValueSampledData: Data4LifeFHIR.SampledData?
  public var defaultValueSignature: Data4LifeFHIR.Signature?
  public var defaultValueString: Swift.String?
  public var defaultValueTime: Data4LifeFHIR.FHIRTime?
  public var defaultValueTiming: Data4LifeFHIR.Timing?
  public var defaultValueUnsignedInt: Swift.Int?
  public var defaultValueUri: Swift.String?
  public var definition: Swift.String?
  public var example: [Data4LifeFHIR.ElementDefinitionExample]?
  public var fixedAddress: Data4LifeFHIR.Address?
  public var fixedAge: Data4LifeFHIR.Age?
  public var fixedAnnotation: Data4LifeFHIR.Annotation?
  public var fixedAttachment: Data4LifeFHIR.Attachment?
  public var fixedBase64Binary: Swift.String?
  public var fixedBoolean: Swift.Bool?
  public var fixedCode: Swift.String?
  public var fixedCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var fixedCoding: Data4LifeFHIR.Coding?
  public var fixedContactPoint: Data4LifeFHIR.ContactPoint?
  public var fixedCount: Data4LifeFHIR.Count?
  public var fixedDate: Data4LifeFHIR.FHIRDate?
  public var fixedDateTime: Data4LifeFHIR.DateTime?
  public var fixedDecimal: Swift.Float?
  public var fixedDistance: Data4LifeFHIR.Distance?
  public var fixedDuration: Data4LifeFHIR.Duration?
  public var fixedHumanName: Data4LifeFHIR.HumanName?
  public var fixedId: Swift.String?
  public var fixedIdentifier: Data4LifeFHIR.Identifier?
  public var fixedInstant: Data4LifeFHIR.Instant?
  public var fixedInteger: Swift.Int?
  public var fixedMarkdown: Swift.String?
  public var fixedMeta: Data4LifeFHIR.Meta?
  public var fixedMoney: Data4LifeFHIR.Money?
  public var fixedOid: Foundation.URL?
  public var fixedPeriod: Data4LifeFHIR.Period?
  public var fixedPositiveInt: Swift.Int?
  public var fixedQuantity: Data4LifeFHIR.Quantity?
  public var fixedRange: Data4LifeFHIR.Range?
  public var fixedRatio: Data4LifeFHIR.Ratio?
  public var fixedReference: Data4LifeFHIR.Reference?
  public var fixedSampledData: Data4LifeFHIR.SampledData?
  public var fixedSignature: Data4LifeFHIR.Signature?
  public var fixedString: Swift.String?
  public var fixedTime: Data4LifeFHIR.FHIRTime?
  public var fixedTiming: Data4LifeFHIR.Timing?
  public var fixedUnsignedInt: Swift.Int?
  public var fixedUri: Swift.String?
  public var isModifier: Swift.Bool?
  public var isSummary: Swift.Bool?
  public var label: Swift.String?
  public var mapping: [Data4LifeFHIR.ElementDefinitionMapping]?
  public var max: Swift.String?
  public var maxLength: Swift.Int?
  public var maxValueDate: Data4LifeFHIR.FHIRDate?
  public var maxValueDateTime: Data4LifeFHIR.DateTime?
  public var maxValueDecimal: Swift.Float?
  public var maxValueInstant: Data4LifeFHIR.Instant?
  public var maxValueInteger: Swift.Int?
  public var maxValuePositiveInt: Swift.Int?
  public var maxValueQuantity: Data4LifeFHIR.Quantity?
  public var maxValueTime: Data4LifeFHIR.FHIRTime?
  public var maxValueUnsignedInt: Swift.Int?
  public var meaningWhenMissing: Swift.String?
  public var min: Swift.Int?
  public var minValueDate: Data4LifeFHIR.FHIRDate?
  public var minValueDateTime: Data4LifeFHIR.DateTime?
  public var minValueDecimal: Swift.Float?
  public var minValueInstant: Data4LifeFHIR.Instant?
  public var minValueInteger: Swift.Int?
  public var minValuePositiveInt: Swift.Int?
  public var minValueQuantity: Data4LifeFHIR.Quantity?
  public var minValueTime: Data4LifeFHIR.FHIRTime?
  public var minValueUnsignedInt: Swift.Int?
  public var mustSupport: Swift.Bool?
  public var orderMeaning: Swift.String?
  public var path: Swift.String?
  public var patternAddress: Data4LifeFHIR.Address?
  public var patternAge: Data4LifeFHIR.Age?
  public var patternAnnotation: Data4LifeFHIR.Annotation?
  public var patternAttachment: Data4LifeFHIR.Attachment?
  public var patternBase64Binary: Swift.String?
  public var patternBoolean: Swift.Bool?
  public var patternCode: Swift.String?
  public var patternCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var patternCoding: Data4LifeFHIR.Coding?
  public var patternContactPoint: Data4LifeFHIR.ContactPoint?
  public var patternCount: Data4LifeFHIR.Count?
  public var patternDate: Data4LifeFHIR.FHIRDate?
  public var patternDateTime: Data4LifeFHIR.DateTime?
  public var patternDecimal: Swift.Float?
  public var patternDistance: Data4LifeFHIR.Distance?
  public var patternDuration: Data4LifeFHIR.Duration?
  public var patternHumanName: Data4LifeFHIR.HumanName?
  public var patternId: Swift.String?
  public var patternIdentifier: Data4LifeFHIR.Identifier?
  public var patternInstant: Data4LifeFHIR.Instant?
  public var patternInteger: Swift.Int?
  public var patternMarkdown: Swift.String?
  public var patternMeta: Data4LifeFHIR.Meta?
  public var patternMoney: Data4LifeFHIR.Money?
  public var patternOid: Foundation.URL?
  public var patternPeriod: Data4LifeFHIR.Period?
  public var patternPositiveInt: Swift.Int?
  public var patternQuantity: Data4LifeFHIR.Quantity?
  public var patternRange: Data4LifeFHIR.Range?
  public var patternRatio: Data4LifeFHIR.Ratio?
  public var patternReference: Data4LifeFHIR.Reference?
  public var patternSampledData: Data4LifeFHIR.SampledData?
  public var patternSignature: Data4LifeFHIR.Signature?
  public var patternString: Swift.String?
  public var patternTime: Data4LifeFHIR.FHIRTime?
  public var patternTiming: Data4LifeFHIR.Timing?
  public var patternUnsignedInt: Swift.Int?
  public var patternUri: Swift.String?
  public var representation: [Data4LifeFHIR.PropertyRepresentation]?
  public var requirements: Swift.String?
  public var short: Swift.String?
  public var sliceName: Swift.String?
  public var slicing: Data4LifeFHIR.ElementDefinitionSlicing?
  public var type: [Data4LifeFHIR.ElementDefinitionType]?
  convenience public init(path: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinition {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionBase : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var max: Swift.String?
  public var min: Swift.Int?
  public var path: Swift.String?
  convenience public init(max: Swift.String, min: Swift.Int, path: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionBase {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionBinding : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var description_fhir: Swift.String?
  public var strength: Data4LifeFHIR.BindingStrength?
  public var valueSetReference: Data4LifeFHIR.Reference?
  public var valueSetUri: Swift.String?
  convenience public init(strength: Data4LifeFHIR.BindingStrength)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionBinding {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionConstraint : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var expression: Swift.String?
  public var human: Swift.String?
  public var key: Swift.String?
  public var requirements: Swift.String?
  public var severity: Data4LifeFHIR.ConstraintSeverity?
  public var source: Swift.String?
  public var xpath: Swift.String?
  convenience public init(expression: Swift.String, human: Swift.String, key: Swift.String, severity: Data4LifeFHIR.ConstraintSeverity)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionConstraint {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionExample : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var label: Swift.String?
  public var valueAddress: Data4LifeFHIR.Address?
  public var valueAge: Data4LifeFHIR.Age?
  public var valueAnnotation: Data4LifeFHIR.Annotation?
  public var valueAttachment: Data4LifeFHIR.Attachment?
  public var valueBase64Binary: Swift.String?
  public var valueBoolean: Swift.Bool?
  public var valueCode: Swift.String?
  public var valueCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var valueCoding: Data4LifeFHIR.Coding?
  public var valueContactPoint: Data4LifeFHIR.ContactPoint?
  public var valueCount: Data4LifeFHIR.Count?
  public var valueDate: Data4LifeFHIR.FHIRDate?
  public var valueDateTime: Data4LifeFHIR.DateTime?
  public var valueDecimal: Swift.Float?
  public var valueDistance: Data4LifeFHIR.Distance?
  public var valueDuration: Data4LifeFHIR.Duration?
  public var valueHumanName: Data4LifeFHIR.HumanName?
  public var valueId: Swift.String?
  public var valueIdentifier: Data4LifeFHIR.Identifier?
  public var valueInstant: Data4LifeFHIR.Instant?
  public var valueInteger: Swift.Int?
  public var valueMarkdown: Swift.String?
  public var valueMeta: Data4LifeFHIR.Meta?
  public var valueMoney: Data4LifeFHIR.Money?
  public var valueOid: Foundation.URL?
  public var valuePeriod: Data4LifeFHIR.Period?
  public var valuePositiveInt: Swift.Int?
  public var valueQuantity: Data4LifeFHIR.Quantity?
  public var valueRange: Data4LifeFHIR.Range?
  public var valueRatio: Data4LifeFHIR.Ratio?
  public var valueReference: Data4LifeFHIR.Reference?
  public var valueSampledData: Data4LifeFHIR.SampledData?
  public var valueSignature: Data4LifeFHIR.Signature?
  public var valueString: Swift.String?
  public var valueTime: Data4LifeFHIR.FHIRTime?
  public var valueTiming: Data4LifeFHIR.Timing?
  public var valueUnsignedInt: Swift.Int?
  public var valueUri: Swift.String?
  convenience public init(label: Swift.String, value: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionExample {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionMapping : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var comment: Swift.String?
  public var identity: Swift.String?
  public var language: Swift.String?
  public var map: Swift.String?
  convenience public init(identity: Swift.String, map: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionMapping {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionSlicing : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var description_fhir: Swift.String?
  public var discriminator: [Data4LifeFHIR.ElementDefinitionSlicingDiscriminator]?
  public var ordered: Swift.Bool?
  public var rules: Data4LifeFHIR.SlicingRules?
  convenience public init(rules: Data4LifeFHIR.SlicingRules)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionSlicing {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionSlicingDiscriminator : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var path: Swift.String?
  public var type: Data4LifeFHIR.DiscriminatorType?
  convenience public init(path: Swift.String, type: Data4LifeFHIR.DiscriminatorType)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionSlicingDiscriminator {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ElementDefinitionType : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var aggregation: [Data4LifeFHIR.AggregationMode]?
  public var code: Swift.String?
  public var profile: Swift.String?
  public var targetProfile: Swift.String?
  public var versioning: Data4LifeFHIR.ReferenceVersionRules?
  convenience public init(code: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ElementDefinitionType {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Observation : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var bodySite: Data4LifeFHIR.CodeableConcept?
  public var category: [Data4LifeFHIR.CodeableConcept]?
  public var code: Data4LifeFHIR.CodeableConcept?
  public var comment: Swift.String?
  public var component: [Data4LifeFHIR.ObservationComponent]?
  public var context: Data4LifeFHIR.Reference?
  public var dataAbsentReason: Data4LifeFHIR.CodeableConcept?
  public var device: Data4LifeFHIR.Reference?
  public var effectiveDateTime: Data4LifeFHIR.DateTime?
  public var effectivePeriod: Data4LifeFHIR.Period?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var interpretation: Data4LifeFHIR.CodeableConcept?
  public var issued: Data4LifeFHIR.Instant?
  public var method: Data4LifeFHIR.CodeableConcept?
  public var performer: [Data4LifeFHIR.Reference]?
  public var referenceRange: [Data4LifeFHIR.ObservationReferenceRange]?
  public var related: [Data4LifeFHIR.ObservationRelated]?
  public var specimen: Data4LifeFHIR.Reference?
  public var status: Data4LifeFHIR.ObservationStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var valueAttachment: Data4LifeFHIR.Attachment?
  public var valueBoolean: Swift.Bool?
  public var valueCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var valueDateTime: Data4LifeFHIR.DateTime?
  public var valuePeriod: Data4LifeFHIR.Period?
  public var valueQuantity: Data4LifeFHIR.Quantity?
  public var valueRange: Data4LifeFHIR.Range?
  public var valueRatio: Data4LifeFHIR.Ratio?
  public var valueSampledData: Data4LifeFHIR.SampledData?
  public var valueString: Swift.String?
  public var valueTime: Data4LifeFHIR.FHIRTime?
  convenience public init(code: Data4LifeFHIR.CodeableConcept, status: Data4LifeFHIR.ObservationStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Observation {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ObservationComponent : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Data4LifeFHIR.CodeableConcept?
  public var dataAbsentReason: Data4LifeFHIR.CodeableConcept?
  public var interpretation: Data4LifeFHIR.CodeableConcept?
  public var referenceRange: [Data4LifeFHIR.ObservationReferenceRange]?
  public var valueAttachment: Data4LifeFHIR.Attachment?
  public var valueCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var valueDateTime: Data4LifeFHIR.DateTime?
  public var valuePeriod: Data4LifeFHIR.Period?
  public var valueQuantity: Data4LifeFHIR.Quantity?
  public var valueRange: Data4LifeFHIR.Range?
  public var valueRatio: Data4LifeFHIR.Ratio?
  public var valueSampledData: Data4LifeFHIR.SampledData?
  public var valueString: Swift.String?
  public var valueTime: Data4LifeFHIR.FHIRTime?
  convenience public init(code: Data4LifeFHIR.CodeableConcept)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ObservationComponent {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ObservationReferenceRange : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var age: Data4LifeFHIR.Range?
  public var appliesTo: [Data4LifeFHIR.CodeableConcept]?
  public var high: Data4LifeFHIR.Quantity?
  public var low: Data4LifeFHIR.Quantity?
  public var text: Swift.String?
  public var type: Data4LifeFHIR.CodeableConcept?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ObservationReferenceRange {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ObservationRelated : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var target: Data4LifeFHIR.Reference?
  public var type: Data4LifeFHIR.ObservationRelationshipType?
  convenience public init(target: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ObservationRelated {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationRequest : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var authoredOn: Data4LifeFHIR.DateTime?
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var category: Data4LifeFHIR.CodeableConcept?
  public var context: Data4LifeFHIR.Reference?
  public var definition: [Data4LifeFHIR.Reference]?
  public var detectedIssue: [Data4LifeFHIR.Reference]?
  public var dispenseRequest: Data4LifeFHIR.MedicationRequestDispenseRequest?
  public var dosageInstruction: [Data4LifeFHIR.Dosage]?
  public var eventHistory: [Data4LifeFHIR.Reference]?
  public var groupIdentifier: Data4LifeFHIR.Identifier?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var intent: Data4LifeFHIR.MedicationRequestIntent?
  public var medicationCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var medicationReference: Data4LifeFHIR.Reference?
  public var note: [Data4LifeFHIR.Annotation]?
  public var priorPrescription: Data4LifeFHIR.Reference?
  public var priority: Data4LifeFHIR.MedicationRequestPriority?
  public var reasonCode: [Data4LifeFHIR.CodeableConcept]?
  public var reasonReference: [Data4LifeFHIR.Reference]?
  public var recorder: Data4LifeFHIR.Reference?
  public var requester: Data4LifeFHIR.MedicationRequestRequester?
  public var status: Data4LifeFHIR.MedicationRequestStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var substitution: Data4LifeFHIR.MedicationRequestSubstitution?
  public var supportingInformation: [Data4LifeFHIR.Reference]?
  convenience public init(intent: Data4LifeFHIR.MedicationRequestIntent, medication: Any, subject: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationRequest {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationRequestDispenseRequest : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var expectedSupplyDuration: Data4LifeFHIR.Duration?
  public var numberOfRepeatsAllowed: Swift.Int?
  public var performer: Data4LifeFHIR.Reference?
  public var quantity: Data4LifeFHIR.Quantity?
  public var validityPeriod: Data4LifeFHIR.Period?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationRequestDispenseRequest {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationRequestRequester : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var agent: Data4LifeFHIR.Reference?
  public var onBehalfOf: Data4LifeFHIR.Reference?
  convenience public init(agent: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationRequestRequester {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class MedicationRequestSubstitution : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var allowed: Swift.Bool?
  public var reason: Data4LifeFHIR.CodeableConcept?
  convenience public init(allowed: Swift.Bool)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MedicationRequestSubstitution {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class Provenance : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var activity: Data4LifeFHIR.Coding?
  public var agent: [Data4LifeFHIR.ProvenanceAgent]?
  public var entity: [Data4LifeFHIR.ProvenanceEntity]?
  public var location: Data4LifeFHIR.Reference?
  public var period: Data4LifeFHIR.Period?
  public var policy: [Swift.String]?
  public var reason: [Data4LifeFHIR.Coding]?
  public var recorded: Data4LifeFHIR.Instant?
  public var signature: [Data4LifeFHIR.Signature]?
  public var target: [Data4LifeFHIR.Reference]?
  convenience public init(agent: [Data4LifeFHIR.ProvenanceAgent], recorded: Data4LifeFHIR.Instant, target: [Data4LifeFHIR.Reference])
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension Provenance {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ProvenanceAgent : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var onBehalfOfReference: Data4LifeFHIR.Reference?
  public var onBehalfOfUri: Swift.String?
  public var relatedAgentType: Data4LifeFHIR.CodeableConcept?
  public var role: [Data4LifeFHIR.CodeableConcept]?
  public var whoReference: Data4LifeFHIR.Reference?
  public var whoUri: Swift.String?
  convenience public init(who: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ProvenanceAgent {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ProvenanceEntity : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var agent: [Data4LifeFHIR.ProvenanceAgent]?
  public var role: Data4LifeFHIR.ProvenanceEntityRole?
  public var whatIdentifier: Data4LifeFHIR.Identifier?
  public var whatReference: Data4LifeFHIR.Reference?
  public var whatUri: Swift.String?
  convenience public init(role: Data4LifeFHIR.ProvenanceEntityRole, what: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ProvenanceEntity {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DiagnosticReport : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var category: Data4LifeFHIR.CodeableConcept?
  public var code: Data4LifeFHIR.CodeableConcept?
  public var codedDiagnosis: [Data4LifeFHIR.CodeableConcept]?
  public var conclusion: Swift.String?
  public var context: Data4LifeFHIR.Reference?
  public var effectiveDateTime: Data4LifeFHIR.DateTime?
  public var effectivePeriod: Data4LifeFHIR.Period?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var image: [Data4LifeFHIR.DiagnosticReportImage]?
  public var imagingStudy: [Data4LifeFHIR.Reference]?
  public var issued: Data4LifeFHIR.Instant?
  public var performer: [Data4LifeFHIR.DiagnosticReportPerformer]?
  public var presentedForm: [Data4LifeFHIR.Attachment]?
  public var result: [Data4LifeFHIR.Reference]?
  public var specimen: [Data4LifeFHIR.Reference]?
  public var status: Data4LifeFHIR.DiagnosticReportStatus?
  public var subject: Data4LifeFHIR.Reference?
  convenience public init(code: Data4LifeFHIR.CodeableConcept, status: Data4LifeFHIR.DiagnosticReportStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DiagnosticReport {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DiagnosticReportImage : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var comment: Swift.String?
  public var link: Data4LifeFHIR.Reference?
  convenience public init(link: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DiagnosticReportImage {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DiagnosticReportPerformer : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var actor: Data4LifeFHIR.Reference?
  public var role: Data4LifeFHIR.CodeableConcept?
  convenience public init(actor: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DiagnosticReportPerformer {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ProcedureRequest : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var asNeededBoolean: Swift.Bool?
  public var asNeededCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var authoredOn: Data4LifeFHIR.DateTime?
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var bodySite: [Data4LifeFHIR.CodeableConcept]?
  public var category: [Data4LifeFHIR.CodeableConcept]?
  public var code: Data4LifeFHIR.CodeableConcept?
  public var context: Data4LifeFHIR.Reference?
  public var definition: [Data4LifeFHIR.Reference]?
  public var doNotPerform: Swift.Bool?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var intent: Data4LifeFHIR.RequestIntent?
  public var note: [Data4LifeFHIR.Annotation]?
  public var occurrenceDateTime: Data4LifeFHIR.DateTime?
  public var occurrencePeriod: Data4LifeFHIR.Period?
  public var occurrenceTiming: Data4LifeFHIR.Timing?
  public var performer: Data4LifeFHIR.Reference?
  public var performerType: Data4LifeFHIR.CodeableConcept?
  public var priority: Data4LifeFHIR.RequestPriority?
  public var reasonCode: [Data4LifeFHIR.CodeableConcept]?
  public var reasonReference: [Data4LifeFHIR.Reference]?
  public var relevantHistory: [Data4LifeFHIR.Reference]?
  public var replaces: [Data4LifeFHIR.Reference]?
  public var requester: Data4LifeFHIR.ProcedureRequestRequester?
  public var requisition: Data4LifeFHIR.Identifier?
  public var specimen: [Data4LifeFHIR.Reference]?
  public var status: Data4LifeFHIR.RequestStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var supportingInfo: [Data4LifeFHIR.Reference]?
  convenience public init(code: Data4LifeFHIR.CodeableConcept, intent: Data4LifeFHIR.RequestIntent, status: Data4LifeFHIR.RequestStatus, subject: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ProcedureRequest {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class ProcedureRequestRequester : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var agent: Data4LifeFHIR.Reference?
  public var onBehalfOf: Data4LifeFHIR.Reference?
  convenience public init(agent: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension ProcedureRequestRequester {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DomainResource : Data4LifeFHIR.Resource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var contained: [Data4LifeFHIR.Resource]?
  public var extension_fhir: [Data4LifeFHIR.Extension]?
  public var modifierExtension: [Data4LifeFHIR.Extension]?
  public var text: Data4LifeFHIR.Narrative?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DomainResource {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class UsageContext : Data4LifeFHIR.Element {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Data4LifeFHIR.Coding?
  public var valueCodeableConcept: Data4LifeFHIR.CodeableConcept?
  public var valueQuantity: Data4LifeFHIR.Quantity?
  public var valueRange: Data4LifeFHIR.Range?
  convenience public init(code: Data4LifeFHIR.Coding, value: Any)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension UsageContext {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension DomainResource {
  open func containedResource<T>(_ ref: Data4LifeFHIR.Reference) -> T? where T : Data4LifeFHIR.DomainResource
  open func containedResource<T>(_ refId: Swift.String) -> T? where T : Data4LifeFHIR.DomainResource
  open func contain(resource: Data4LifeFHIR.Resource, withDisplay display: Swift.String? = nil) throws -> Data4LifeFHIR.Reference
}
@_inheritsConvenienceInitializers open class FamilyMemberHistory : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var ageAge: Data4LifeFHIR.Age?
  public var ageRange: Data4LifeFHIR.Range?
  public var ageString: Swift.String?
  public var bornDate: Data4LifeFHIR.FHIRDate?
  public var bornPeriod: Data4LifeFHIR.Period?
  public var bornString: Swift.String?
  public var condition: [Data4LifeFHIR.FamilyMemberHistoryCondition]?
  public var date: Data4LifeFHIR.DateTime?
  public var deceasedAge: Data4LifeFHIR.Age?
  public var deceasedBoolean: Swift.Bool?
  public var deceasedDate: Data4LifeFHIR.FHIRDate?
  public var deceasedRange: Data4LifeFHIR.Range?
  public var deceasedString: Swift.String?
  public var definition: [Data4LifeFHIR.Reference]?
  public var estimatedAge: Swift.Bool?
  public var gender: Data4LifeFHIR.AdministrativeGender?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var name: Swift.String?
  public var notDone: Swift.Bool?
  public var notDoneReason: Data4LifeFHIR.CodeableConcept?
  public var note: [Data4LifeFHIR.Annotation]?
  public var patient: Data4LifeFHIR.Reference?
  public var reasonCode: [Data4LifeFHIR.CodeableConcept]?
  public var reasonReference: [Data4LifeFHIR.Reference]?
  public var relationship: Data4LifeFHIR.CodeableConcept?
  public var status: Data4LifeFHIR.FamilyHistoryStatus?
  convenience public init(patient: Data4LifeFHIR.Reference, relationship: Data4LifeFHIR.CodeableConcept, status: Data4LifeFHIR.FamilyHistoryStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension FamilyMemberHistory {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class FamilyMemberHistoryCondition : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Data4LifeFHIR.CodeableConcept?
  public var note: [Data4LifeFHIR.Annotation]?
  public var onsetAge: Data4LifeFHIR.Age?
  public var onsetPeriod: Data4LifeFHIR.Period?
  public var onsetRange: Data4LifeFHIR.Range?
  public var onsetString: Swift.String?
  public var outcome: Data4LifeFHIR.CodeableConcept?
  convenience public init(code: Data4LifeFHIR.CodeableConcept)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension FamilyMemberHistoryCondition {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DocumentReference : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var `class`: Data4LifeFHIR.CodeableConcept?
  public var authenticator: Data4LifeFHIR.Reference?
  public var author: [Data4LifeFHIR.Reference]?
  public var content: [Data4LifeFHIR.DocumentReferenceContent]?
  public var context: Data4LifeFHIR.DocumentReferenceContext?
  public var created: Data4LifeFHIR.DateTime?
  public var custodian: Data4LifeFHIR.Reference?
  public var description_fhir: Swift.String?
  public var docStatus: Data4LifeFHIR.CompositionStatus?
  public var identifier: [Data4LifeFHIR.Identifier]?
  public var indexed: Data4LifeFHIR.Instant?
  public var masterIdentifier: Data4LifeFHIR.Identifier?
  public var relatesTo: [Data4LifeFHIR.DocumentReferenceRelatesTo]?
  public var securityLabel: [Data4LifeFHIR.CodeableConcept]?
  public var status: Data4LifeFHIR.DocumentReferenceStatus?
  public var subject: Data4LifeFHIR.Reference?
  public var type: Data4LifeFHIR.CodeableConcept?
  convenience public init(content: [Data4LifeFHIR.DocumentReferenceContent], indexed: Data4LifeFHIR.Instant, status: Data4LifeFHIR.DocumentReferenceStatus, type: Data4LifeFHIR.CodeableConcept)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DocumentReference {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DocumentReferenceContent : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var attachment: Data4LifeFHIR.Attachment?
  public var format: Data4LifeFHIR.Coding?
  convenience public init(attachment: Data4LifeFHIR.Attachment)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DocumentReferenceContent {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DocumentReferenceContext : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var encounter: Data4LifeFHIR.Reference?
  public var event: [Data4LifeFHIR.CodeableConcept]?
  public var facilityType: Data4LifeFHIR.CodeableConcept?
  public var period: Data4LifeFHIR.Period?
  public var practiceSetting: Data4LifeFHIR.CodeableConcept?
  public var related: [Data4LifeFHIR.DocumentReferenceContextRelated]?
  public var sourcePatientInfo: Data4LifeFHIR.Reference?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DocumentReferenceContext {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DocumentReferenceContextRelated : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var identifier: Data4LifeFHIR.Identifier?
  public var ref: Data4LifeFHIR.Reference?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DocumentReferenceContextRelated {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class DocumentReferenceRelatesTo : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var code: Data4LifeFHIR.DocumentRelationshipType?
  public var target: Data4LifeFHIR.Reference?
  convenience public init(code: Data4LifeFHIR.DocumentRelationshipType, target: Data4LifeFHIR.Reference)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension DocumentReferenceRelatesTo {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension Quantity {
  convenience public init(value: Swift.Float, unit: Swift.String)
}
@_inheritsConvenienceInitializers open class QuestionnaireResponse : Data4LifeFHIR.DomainResource {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var author: Data4LifeFHIR.Reference?
  public var authored: Data4LifeFHIR.DateTime?
  public var basedOn: [Data4LifeFHIR.Reference]?
  public var context: Data4LifeFHIR.Reference?
  public var identifier: Data4LifeFHIR.Identifier?
  public var item: [Data4LifeFHIR.QuestionnaireResponseItem]?
  public var parent: [Data4LifeFHIR.Reference]?
  public var questionnaire: Data4LifeFHIR.Reference?
  public var source: Data4LifeFHIR.Reference?
  public var status: Data4LifeFHIR.QuestionnaireResponseStatus?
  public var subject: Data4LifeFHIR.Reference?
  convenience public init(status: Data4LifeFHIR.QuestionnaireResponseStatus)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension QuestionnaireResponse {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class QuestionnaireResponseItem : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var answer: [Data4LifeFHIR.QuestionnaireResponseItemAnswer]?
  public var definition: Swift.String?
  public var item: [Data4LifeFHIR.QuestionnaireResponseItem]?
  public var linkId: Swift.String?
  public var subject: Data4LifeFHIR.Reference?
  public var text: Swift.String?
  convenience public init(linkId: Swift.String)
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension QuestionnaireResponseItem {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers open class QuestionnaireResponseItemAnswer : Data4LifeFHIR.BackboneElement {
  override open class var resourceType: Swift.String {
    get
  }
  override public subscript<T>(name: Swift.String) -> T? {
    get
  }
  override public subscript(untyped name: Swift.String) -> Any? {
    get
  }
  public var item: [Data4LifeFHIR.QuestionnaireResponseItem]?
  public var valueAttachment: Data4LifeFHIR.Attachment?
  public var valueBoolean: Swift.Bool?
  public var valueCoding: Data4LifeFHIR.Coding?
  public var valueDate: Data4LifeFHIR.FHIRDate?
  public var valueDateTime: Data4LifeFHIR.DateTime?
  public var valueDecimal: Swift.Float?
  public var valueInteger: Swift.Int?
  public var valueQuantity: Data4LifeFHIR.Quantity?
  public var valueReference: Data4LifeFHIR.Reference?
  public var valueString: Swift.String?
  public var valueTime: Data4LifeFHIR.FHIRTime?
  public var valueUri: Swift.String?
  required public init()
  override open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension QuestionnaireResponseItemAnswer {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension Data4LifeFHIR.FHIRDate : Swift.Comparable {}
extension Data4LifeFHIR.FHIRDate : Swift.CustomStringConvertible {}
extension Data4LifeFHIR.FHIRDate : Data4LifeFHIR.FHIRPrimitive {}
extension Data4LifeFHIR.FHIRTime : Swift.Comparable {}
extension Data4LifeFHIR.FHIRTime : Swift.CustomStringConvertible {}
extension Data4LifeFHIR.FHIRTime : Data4LifeFHIR.FHIRPrimitive {}
extension Data4LifeFHIR.DateTime : Swift.Comparable {}
extension Data4LifeFHIR.DateTime : Swift.CustomStringConvertible {}
extension Data4LifeFHIR.DateTime : Data4LifeFHIR.FHIRPrimitive {}
extension Data4LifeFHIR.Instant : Swift.Comparable {}
extension Data4LifeFHIR.Instant : Swift.CustomStringConvertible {}
extension Data4LifeFHIR.Instant : Data4LifeFHIR.FHIRPrimitive {}
extension Data4LifeFHIR.AbstractType : Swift.Equatable {}
extension Data4LifeFHIR.AbstractType : Swift.Hashable {}
extension Data4LifeFHIR.AbstractType : Swift.RawRepresentable {}
extension Data4LifeFHIR.AccountStatus : Swift.Equatable {}
extension Data4LifeFHIR.AccountStatus : Swift.Hashable {}
extension Data4LifeFHIR.AccountStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionCardinalityBehavior : Swift.Equatable {}
extension Data4LifeFHIR.ActionCardinalityBehavior : Swift.Hashable {}
extension Data4LifeFHIR.ActionCardinalityBehavior : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionConditionKind : Swift.Equatable {}
extension Data4LifeFHIR.ActionConditionKind : Swift.Hashable {}
extension Data4LifeFHIR.ActionConditionKind : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionGroupingBehavior : Swift.Equatable {}
extension Data4LifeFHIR.ActionGroupingBehavior : Swift.Hashable {}
extension Data4LifeFHIR.ActionGroupingBehavior : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionList : Swift.Equatable {}
extension Data4LifeFHIR.ActionList : Swift.Hashable {}
extension Data4LifeFHIR.ActionList : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionParticipantType : Swift.Equatable {}
extension Data4LifeFHIR.ActionParticipantType : Swift.Hashable {}
extension Data4LifeFHIR.ActionParticipantType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionPrecheckBehavior : Swift.Equatable {}
extension Data4LifeFHIR.ActionPrecheckBehavior : Swift.Hashable {}
extension Data4LifeFHIR.ActionPrecheckBehavior : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionRelationshipType : Swift.Equatable {}
extension Data4LifeFHIR.ActionRelationshipType : Swift.Hashable {}
extension Data4LifeFHIR.ActionRelationshipType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionRequiredBehavior : Swift.Equatable {}
extension Data4LifeFHIR.ActionRequiredBehavior : Swift.Hashable {}
extension Data4LifeFHIR.ActionRequiredBehavior : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionSelectionBehavior : Swift.Equatable {}
extension Data4LifeFHIR.ActionSelectionBehavior : Swift.Hashable {}
extension Data4LifeFHIR.ActionSelectionBehavior : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActionType : Swift.Equatable {}
extension Data4LifeFHIR.ActionType : Swift.Hashable {}
extension Data4LifeFHIR.ActionType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ActivityDefinitionCategory : Swift.Equatable {}
extension Data4LifeFHIR.ActivityDefinitionCategory : Swift.Hashable {}
extension Data4LifeFHIR.ActivityDefinitionCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.AddressType : Swift.Equatable {}
extension Data4LifeFHIR.AddressType : Swift.Hashable {}
extension Data4LifeFHIR.AddressType : Swift.RawRepresentable {}
extension Data4LifeFHIR.AddressUse : Swift.Equatable {}
extension Data4LifeFHIR.AddressUse : Swift.Hashable {}
extension Data4LifeFHIR.AddressUse : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdministrativeGender : Swift.Equatable {}
extension Data4LifeFHIR.AdministrativeGender : Swift.Hashable {}
extension Data4LifeFHIR.AdministrativeGender : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdverseEventCategory : Swift.Equatable {}
extension Data4LifeFHIR.AdverseEventCategory : Swift.Hashable {}
extension Data4LifeFHIR.AdverseEventCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdverseEventCausality : Swift.Equatable {}
extension Data4LifeFHIR.AdverseEventCausality : Swift.Hashable {}
extension Data4LifeFHIR.AdverseEventCausality : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdverseEventCausalityAssessment : Swift.Equatable {}
extension Data4LifeFHIR.AdverseEventCausalityAssessment : Swift.Hashable {}
extension Data4LifeFHIR.AdverseEventCausalityAssessment : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdverseEventCausalityMethod : Swift.Equatable {}
extension Data4LifeFHIR.AdverseEventCausalityMethod : Swift.Hashable {}
extension Data4LifeFHIR.AdverseEventCausalityMethod : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdverseEventCausalityResult : Swift.Equatable {}
extension Data4LifeFHIR.AdverseEventCausalityResult : Swift.Hashable {}
extension Data4LifeFHIR.AdverseEventCausalityResult : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdverseEventOutcome : Swift.Equatable {}
extension Data4LifeFHIR.AdverseEventOutcome : Swift.Hashable {}
extension Data4LifeFHIR.AdverseEventOutcome : Swift.RawRepresentable {}
extension Data4LifeFHIR.AdverseEventSeriousness : Swift.Equatable {}
extension Data4LifeFHIR.AdverseEventSeriousness : Swift.Hashable {}
extension Data4LifeFHIR.AdverseEventSeriousness : Swift.RawRepresentable {}
extension Data4LifeFHIR.AggregationMode : Swift.Equatable {}
extension Data4LifeFHIR.AggregationMode : Swift.Hashable {}
extension Data4LifeFHIR.AggregationMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceCategory : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceCategory : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceCertainty : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceCertainty : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceCertainty : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceClinicalStatus : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceClinicalStatus : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceClinicalStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceCriticality : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceCriticality : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceCriticality : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceSeverity : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceSeverity : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceSeverity : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceSubstanceExposureRisk : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceSubstanceExposureRisk : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceSubstanceExposureRisk : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceType : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceType : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceType : Swift.RawRepresentable {}
extension Data4LifeFHIR.AllergyIntoleranceVerificationStatus : Swift.Equatable {}
extension Data4LifeFHIR.AllergyIntoleranceVerificationStatus : Swift.Hashable {}
extension Data4LifeFHIR.AllergyIntoleranceVerificationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.AppointmentStatus : Swift.Equatable {}
extension Data4LifeFHIR.AppointmentStatus : Swift.Hashable {}
extension Data4LifeFHIR.AppointmentStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.AssertionDirectionType : Swift.Equatable {}
extension Data4LifeFHIR.AssertionDirectionType : Swift.Hashable {}
extension Data4LifeFHIR.AssertionDirectionType : Swift.RawRepresentable {}
extension Data4LifeFHIR.AssertionOperatorType : Swift.Equatable {}
extension Data4LifeFHIR.AssertionOperatorType : Swift.Hashable {}
extension Data4LifeFHIR.AssertionOperatorType : Swift.RawRepresentable {}
extension Data4LifeFHIR.AssertionResponseTypes : Swift.Equatable {}
extension Data4LifeFHIR.AssertionResponseTypes : Swift.Hashable {}
extension Data4LifeFHIR.AssertionResponseTypes : Swift.RawRepresentable {}
extension Data4LifeFHIR.AuditEventAction : Swift.Equatable {}
extension Data4LifeFHIR.AuditEventAction : Swift.Hashable {}
extension Data4LifeFHIR.AuditEventAction : Swift.RawRepresentable {}
extension Data4LifeFHIR.BindingStrength : Swift.Equatable {}
extension Data4LifeFHIR.BindingStrength : Swift.Hashable {}
extension Data4LifeFHIR.BindingStrength : Swift.RawRepresentable {}
extension Data4LifeFHIR.BundleType : Swift.Equatable {}
extension Data4LifeFHIR.BundleType : Swift.Hashable {}
extension Data4LifeFHIR.BundleType : Swift.RawRepresentable {}
extension Data4LifeFHIR.CapabilityStatementKind : Swift.Equatable {}
extension Data4LifeFHIR.CapabilityStatementKind : Swift.Hashable {}
extension Data4LifeFHIR.CapabilityStatementKind : Swift.RawRepresentable {}
extension Data4LifeFHIR.CarePlanActivityStatus : Swift.Equatable {}
extension Data4LifeFHIR.CarePlanActivityStatus : Swift.Hashable {}
extension Data4LifeFHIR.CarePlanActivityStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.CarePlanIntent : Swift.Equatable {}
extension Data4LifeFHIR.CarePlanIntent : Swift.Hashable {}
extension Data4LifeFHIR.CarePlanIntent : Swift.RawRepresentable {}
extension Data4LifeFHIR.CarePlanStatus : Swift.Equatable {}
extension Data4LifeFHIR.CarePlanStatus : Swift.Hashable {}
extension Data4LifeFHIR.CarePlanStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.CareTeamCategory : Swift.Equatable {}
extension Data4LifeFHIR.CareTeamCategory : Swift.Hashable {}
extension Data4LifeFHIR.CareTeamCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.CareTeamStatus : Swift.Equatable {}
extension Data4LifeFHIR.CareTeamStatus : Swift.Hashable {}
extension Data4LifeFHIR.CareTeamStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ChargeItemStatus : Swift.Equatable {}
extension Data4LifeFHIR.ChargeItemStatus : Swift.Hashable {}
extension Data4LifeFHIR.ChargeItemStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ChoiceListOrientation : Swift.Equatable {}
extension Data4LifeFHIR.ChoiceListOrientation : Swift.Hashable {}
extension Data4LifeFHIR.ChoiceListOrientation : Swift.RawRepresentable {}
extension Data4LifeFHIR.ClaimPayeeResourceType : Swift.Equatable {}
extension Data4LifeFHIR.ClaimPayeeResourceType : Swift.Hashable {}
extension Data4LifeFHIR.ClaimPayeeResourceType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ClassificationOrContext : Swift.Equatable {}
extension Data4LifeFHIR.ClassificationOrContext : Swift.Hashable {}
extension Data4LifeFHIR.ClassificationOrContext : Swift.RawRepresentable {}
extension Data4LifeFHIR.ClinicalImpressionStatus : Swift.Equatable {}
extension Data4LifeFHIR.ClinicalImpressionStatus : Swift.Hashable {}
extension Data4LifeFHIR.ClinicalImpressionStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.CodeSystemContentMode : Swift.Equatable {}
extension Data4LifeFHIR.CodeSystemContentMode : Swift.Hashable {}
extension Data4LifeFHIR.CodeSystemContentMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.CodeSystemHierarchyMeaning : Swift.Equatable {}
extension Data4LifeFHIR.CodeSystemHierarchyMeaning : Swift.Hashable {}
extension Data4LifeFHIR.CodeSystemHierarchyMeaning : Swift.RawRepresentable {}
extension Data4LifeFHIR.CommunicationCategory : Swift.Equatable {}
extension Data4LifeFHIR.CommunicationCategory : Swift.Hashable {}
extension Data4LifeFHIR.CommunicationCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.CommunicationNotDoneReason : Swift.Equatable {}
extension Data4LifeFHIR.CommunicationNotDoneReason : Swift.Hashable {}
extension Data4LifeFHIR.CommunicationNotDoneReason : Swift.RawRepresentable {}
extension Data4LifeFHIR.CompartmentType : Swift.Equatable {}
extension Data4LifeFHIR.CompartmentType : Swift.Hashable {}
extension Data4LifeFHIR.CompartmentType : Swift.RawRepresentable {}
extension Data4LifeFHIR.CompositeMeasureScoring : Swift.Equatable {}
extension Data4LifeFHIR.CompositeMeasureScoring : Swift.Hashable {}
extension Data4LifeFHIR.CompositeMeasureScoring : Swift.RawRepresentable {}
extension Data4LifeFHIR.CompositionAttestationMode : Swift.Equatable {}
extension Data4LifeFHIR.CompositionAttestationMode : Swift.Hashable {}
extension Data4LifeFHIR.CompositionAttestationMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.CompositionStatus : Swift.Equatable {}
extension Data4LifeFHIR.CompositionStatus : Swift.Hashable {}
extension Data4LifeFHIR.CompositionStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConceptMapEquivalence : Swift.Equatable {}
extension Data4LifeFHIR.ConceptMapEquivalence : Swift.Hashable {}
extension Data4LifeFHIR.ConceptMapEquivalence : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConceptMapGroupUnmappedMode : Swift.Equatable {}
extension Data4LifeFHIR.ConceptMapGroupUnmappedMode : Swift.Hashable {}
extension Data4LifeFHIR.ConceptMapGroupUnmappedMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConditionState : Swift.Equatable {}
extension Data4LifeFHIR.ConditionState : Swift.Hashable {}
extension Data4LifeFHIR.ConditionState : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConditionVerificationStatus : Swift.Equatable {}
extension Data4LifeFHIR.ConditionVerificationStatus : Swift.Hashable {}
extension Data4LifeFHIR.ConditionVerificationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConditionalDeleteStatus : Swift.Equatable {}
extension Data4LifeFHIR.ConditionalDeleteStatus : Swift.Hashable {}
extension Data4LifeFHIR.ConditionalDeleteStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConditionalReadStatus : Swift.Equatable {}
extension Data4LifeFHIR.ConditionalReadStatus : Swift.Hashable {}
extension Data4LifeFHIR.ConditionalReadStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConformanceExpectation : Swift.Equatable {}
extension Data4LifeFHIR.ConformanceExpectation : Swift.Hashable {}
extension Data4LifeFHIR.ConformanceExpectation : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConsentDataMeaning : Swift.Equatable {}
extension Data4LifeFHIR.ConsentDataMeaning : Swift.Hashable {}
extension Data4LifeFHIR.ConsentDataMeaning : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConsentExceptType : Swift.Equatable {}
extension Data4LifeFHIR.ConsentExceptType : Swift.Hashable {}
extension Data4LifeFHIR.ConsentExceptType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConsentState : Swift.Equatable {}
extension Data4LifeFHIR.ConsentState : Swift.Hashable {}
extension Data4LifeFHIR.ConsentState : Swift.RawRepresentable {}
extension Data4LifeFHIR.ConstraintSeverity : Swift.Equatable {}
extension Data4LifeFHIR.ConstraintSeverity : Swift.Hashable {}
extension Data4LifeFHIR.ConstraintSeverity : Swift.RawRepresentable {}
extension Data4LifeFHIR.ContactPointSystem : Swift.Equatable {}
extension Data4LifeFHIR.ContactPointSystem : Swift.Hashable {}
extension Data4LifeFHIR.ContactPointSystem : Swift.RawRepresentable {}
extension Data4LifeFHIR.ContactPointUse : Swift.Equatable {}
extension Data4LifeFHIR.ContactPointUse : Swift.Hashable {}
extension Data4LifeFHIR.ContactPointUse : Swift.RawRepresentable {}
extension Data4LifeFHIR.ContentType : Swift.Equatable {}
extension Data4LifeFHIR.ContentType : Swift.Hashable {}
extension Data4LifeFHIR.ContentType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ContributorType : Swift.Equatable {}
extension Data4LifeFHIR.ContributorType : Swift.Hashable {}
extension Data4LifeFHIR.ContributorType : Swift.RawRepresentable {}
extension Data4LifeFHIR.CopyNumberEvent : Swift.Equatable {}
extension Data4LifeFHIR.CopyNumberEvent : Swift.Hashable {}
extension Data4LifeFHIR.CopyNumberEvent : Swift.RawRepresentable {}
extension Data4LifeFHIR.DataAbsentReason : Swift.Equatable {}
extension Data4LifeFHIR.DataAbsentReason : Swift.Hashable {}
extension Data4LifeFHIR.DataAbsentReason : Swift.RawRepresentable {}
extension Data4LifeFHIR.DataElementStringency : Swift.Equatable {}
extension Data4LifeFHIR.DataElementStringency : Swift.Hashable {}
extension Data4LifeFHIR.DataElementStringency : Swift.RawRepresentable {}
extension Data4LifeFHIR.DataType : Swift.Equatable {}
extension Data4LifeFHIR.DataType : Swift.Hashable {}
extension Data4LifeFHIR.DataType : Swift.RawRepresentable {}
extension Data4LifeFHIR.DaysOfWeek : Swift.Equatable {}
extension Data4LifeFHIR.DaysOfWeek : Swift.Hashable {}
extension Data4LifeFHIR.DaysOfWeek : Swift.RawRepresentable {}
extension Data4LifeFHIR.DefinitionStatus : Swift.Equatable {}
extension Data4LifeFHIR.DefinitionStatus : Swift.Hashable {}
extension Data4LifeFHIR.DefinitionStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.DefinitionTopic : Swift.Equatable {}
extension Data4LifeFHIR.DefinitionTopic : Swift.Hashable {}
extension Data4LifeFHIR.DefinitionTopic : Swift.RawRepresentable {}
extension Data4LifeFHIR.DetectedIssueSeverity : Swift.Equatable {}
extension Data4LifeFHIR.DetectedIssueSeverity : Swift.Hashable {}
extension Data4LifeFHIR.DetectedIssueSeverity : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceComponentOperationalStatus : Swift.Equatable {}
extension Data4LifeFHIR.DeviceComponentOperationalStatus : Swift.Hashable {}
extension Data4LifeFHIR.DeviceComponentOperationalStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceComponentParameterGroup : Swift.Equatable {}
extension Data4LifeFHIR.DeviceComponentParameterGroup : Swift.Hashable {}
extension Data4LifeFHIR.DeviceComponentParameterGroup : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceMetricCalibrationState : Swift.Equatable {}
extension Data4LifeFHIR.DeviceMetricCalibrationState : Swift.Hashable {}
extension Data4LifeFHIR.DeviceMetricCalibrationState : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceMetricCalibrationType : Swift.Equatable {}
extension Data4LifeFHIR.DeviceMetricCalibrationType : Swift.Hashable {}
extension Data4LifeFHIR.DeviceMetricCalibrationType : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceMetricCategory : Swift.Equatable {}
extension Data4LifeFHIR.DeviceMetricCategory : Swift.Hashable {}
extension Data4LifeFHIR.DeviceMetricCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceMetricColor : Swift.Equatable {}
extension Data4LifeFHIR.DeviceMetricColor : Swift.Hashable {}
extension Data4LifeFHIR.DeviceMetricColor : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceMetricOperationalStatus : Swift.Equatable {}
extension Data4LifeFHIR.DeviceMetricOperationalStatus : Swift.Hashable {}
extension Data4LifeFHIR.DeviceMetricOperationalStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceSpecificationSpecType : Swift.Equatable {}
extension Data4LifeFHIR.DeviceSpecificationSpecType : Swift.Hashable {}
extension Data4LifeFHIR.DeviceSpecificationSpecType : Swift.RawRepresentable {}
extension Data4LifeFHIR.DeviceUseStatementStatus : Swift.Equatable {}
extension Data4LifeFHIR.DeviceUseStatementStatus : Swift.Hashable {}
extension Data4LifeFHIR.DeviceUseStatementStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.DiagnosticReportStatus : Swift.Equatable {}
extension Data4LifeFHIR.DiagnosticReportStatus : Swift.Hashable {}
extension Data4LifeFHIR.DiagnosticReportStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.DigitalMediaType : Swift.Equatable {}
extension Data4LifeFHIR.DigitalMediaType : Swift.Hashable {}
extension Data4LifeFHIR.DigitalMediaType : Swift.RawRepresentable {}
extension Data4LifeFHIR.DiscriminatorType : Swift.Equatable {}
extension Data4LifeFHIR.DiscriminatorType : Swift.Hashable {}
extension Data4LifeFHIR.DiscriminatorType : Swift.RawRepresentable {}
extension Data4LifeFHIR.DocumentMode : Swift.Equatable {}
extension Data4LifeFHIR.DocumentMode : Swift.Hashable {}
extension Data4LifeFHIR.DocumentMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.DocumentReferenceStatus : Swift.Equatable {}
extension Data4LifeFHIR.DocumentReferenceStatus : Swift.Hashable {}
extension Data4LifeFHIR.DocumentReferenceStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.DocumentRelationshipType : Swift.Equatable {}
extension Data4LifeFHIR.DocumentRelationshipType : Swift.Hashable {}
extension Data4LifeFHIR.DocumentRelationshipType : Swift.RawRepresentable {}
extension Data4LifeFHIR.EncounterLocationStatus : Swift.Equatable {}
extension Data4LifeFHIR.EncounterLocationStatus : Swift.Hashable {}
extension Data4LifeFHIR.EncounterLocationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.EncounterStatus : Swift.Equatable {}
extension Data4LifeFHIR.EncounterStatus : Swift.Hashable {}
extension Data4LifeFHIR.EncounterStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.EndpointStatus : Swift.Equatable {}
extension Data4LifeFHIR.EndpointStatus : Swift.Hashable {}
extension Data4LifeFHIR.EndpointStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.EpisodeOfCareStatus : Swift.Equatable {}
extension Data4LifeFHIR.EpisodeOfCareStatus : Swift.Hashable {}
extension Data4LifeFHIR.EpisodeOfCareStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.EventCapabilityMode : Swift.Equatable {}
extension Data4LifeFHIR.EventCapabilityMode : Swift.Hashable {}
extension Data4LifeFHIR.EventCapabilityMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.EventStatus : Swift.Equatable {}
extension Data4LifeFHIR.EventStatus : Swift.Hashable {}
extension Data4LifeFHIR.EventStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.EventTiming : Swift.Equatable {}
extension Data4LifeFHIR.EventTiming : Swift.Hashable {}
extension Data4LifeFHIR.EventTiming : Swift.RawRepresentable {}
extension Data4LifeFHIR.ExplanationOfBenefitStatus : Swift.Equatable {}
extension Data4LifeFHIR.ExplanationOfBenefitStatus : Swift.Hashable {}
extension Data4LifeFHIR.ExplanationOfBenefitStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ExtensionContext : Swift.Equatable {}
extension Data4LifeFHIR.ExtensionContext : Swift.Hashable {}
extension Data4LifeFHIR.ExtensionContext : Swift.RawRepresentable {}
extension Data4LifeFHIR.FHIRDefinedConceptProperties : Swift.Equatable {}
extension Data4LifeFHIR.FHIRDefinedConceptProperties : Swift.Hashable {}
extension Data4LifeFHIR.FHIRDefinedConceptProperties : Swift.RawRepresentable {}
extension Data4LifeFHIR.FHIRDeviceStatus : Swift.Equatable {}
extension Data4LifeFHIR.FHIRDeviceStatus : Swift.Hashable {}
extension Data4LifeFHIR.FHIRDeviceStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.FHIRRestfulInteractions : Swift.Equatable {}
extension Data4LifeFHIR.FHIRRestfulInteractions : Swift.Hashable {}
extension Data4LifeFHIR.FHIRRestfulInteractions : Swift.RawRepresentable {}
extension Data4LifeFHIR.FHIRSubstanceStatus : Swift.Equatable {}
extension Data4LifeFHIR.FHIRSubstanceStatus : Swift.Hashable {}
extension Data4LifeFHIR.FHIRSubstanceStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.FamilyHistoryNotDoneReason : Swift.Equatable {}
extension Data4LifeFHIR.FamilyHistoryNotDoneReason : Swift.Hashable {}
extension Data4LifeFHIR.FamilyHistoryNotDoneReason : Swift.RawRepresentable {}
extension Data4LifeFHIR.FamilyHistoryStatus : Swift.Equatable {}
extension Data4LifeFHIR.FamilyHistoryStatus : Swift.Hashable {}
extension Data4LifeFHIR.FamilyHistoryStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.FilterOperator : Swift.Equatable {}
extension Data4LifeFHIR.FilterOperator : Swift.Hashable {}
extension Data4LifeFHIR.FilterOperator : Swift.RawRepresentable {}
extension Data4LifeFHIR.FlagStatus : Swift.Equatable {}
extension Data4LifeFHIR.FlagStatus : Swift.Hashable {}
extension Data4LifeFHIR.FlagStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.GoalAcceptanceStatus : Swift.Equatable {}
extension Data4LifeFHIR.GoalAcceptanceStatus : Swift.Hashable {}
extension Data4LifeFHIR.GoalAcceptanceStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.GoalRelationshipType : Swift.Equatable {}
extension Data4LifeFHIR.GoalRelationshipType : Swift.Hashable {}
extension Data4LifeFHIR.GoalRelationshipType : Swift.RawRepresentable {}
extension Data4LifeFHIR.GoalStatus : Swift.Equatable {}
extension Data4LifeFHIR.GoalStatus : Swift.Hashable {}
extension Data4LifeFHIR.GoalStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.GraphCompartmentRule : Swift.Equatable {}
extension Data4LifeFHIR.GraphCompartmentRule : Swift.Hashable {}
extension Data4LifeFHIR.GraphCompartmentRule : Swift.RawRepresentable {}
extension Data4LifeFHIR.GroupType : Swift.Equatable {}
extension Data4LifeFHIR.GroupType : Swift.Hashable {}
extension Data4LifeFHIR.GroupType : Swift.RawRepresentable {}
extension Data4LifeFHIR.GuidanceResponseStatus : Swift.Equatable {}
extension Data4LifeFHIR.GuidanceResponseStatus : Swift.Hashable {}
extension Data4LifeFHIR.GuidanceResponseStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.GuideDependencyType : Swift.Equatable {}
extension Data4LifeFHIR.GuideDependencyType : Swift.Hashable {}
extension Data4LifeFHIR.GuideDependencyType : Swift.RawRepresentable {}
extension Data4LifeFHIR.GuidePageKind : Swift.Equatable {}
extension Data4LifeFHIR.GuidePageKind : Swift.Hashable {}
extension Data4LifeFHIR.GuidePageKind : Swift.RawRepresentable {}
extension Data4LifeFHIR.HL7Workgroup : Swift.Equatable {}
extension Data4LifeFHIR.HL7Workgroup : Swift.Hashable {}
extension Data4LifeFHIR.HL7Workgroup : Swift.RawRepresentable {}
extension Data4LifeFHIR.HTTPVerb : Swift.Equatable {}
extension Data4LifeFHIR.HTTPVerb : Swift.Hashable {}
extension Data4LifeFHIR.HTTPVerb : Swift.RawRepresentable {}
extension Data4LifeFHIR.HumanNameAssemblyOrder : Swift.Equatable {}
extension Data4LifeFHIR.HumanNameAssemblyOrder : Swift.Hashable {}
extension Data4LifeFHIR.HumanNameAssemblyOrder : Swift.RawRepresentable {}
extension Data4LifeFHIR.IdentifierUse : Swift.Equatable {}
extension Data4LifeFHIR.IdentifierUse : Swift.Hashable {}
extension Data4LifeFHIR.IdentifierUse : Swift.RawRepresentable {}
extension Data4LifeFHIR.IdentityAssuranceLevel : Swift.Equatable {}
extension Data4LifeFHIR.IdentityAssuranceLevel : Swift.Hashable {}
extension Data4LifeFHIR.IdentityAssuranceLevel : Swift.RawRepresentable {}
extension Data4LifeFHIR.ImplantStatus : Swift.Equatable {}
extension Data4LifeFHIR.ImplantStatus : Swift.Hashable {}
extension Data4LifeFHIR.ImplantStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.IssueSeverity : Swift.Equatable {}
extension Data4LifeFHIR.IssueSeverity : Swift.Hashable {}
extension Data4LifeFHIR.IssueSeverity : Swift.RawRepresentable {}
extension Data4LifeFHIR.IssueType : Swift.Equatable {}
extension Data4LifeFHIR.IssueType : Swift.Hashable {}
extension Data4LifeFHIR.IssueType : Swift.RawRepresentable {}
extension Data4LifeFHIR.LibraryType : Swift.Equatable {}
extension Data4LifeFHIR.LibraryType : Swift.Hashable {}
extension Data4LifeFHIR.LibraryType : Swift.RawRepresentable {}
extension Data4LifeFHIR.LinkType : Swift.Equatable {}
extension Data4LifeFHIR.LinkType : Swift.Hashable {}
extension Data4LifeFHIR.LinkType : Swift.RawRepresentable {}
extension Data4LifeFHIR.LinkageType : Swift.Equatable {}
extension Data4LifeFHIR.LinkageType : Swift.Hashable {}
extension Data4LifeFHIR.LinkageType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ListMode : Swift.Equatable {}
extension Data4LifeFHIR.ListMode : Swift.Hashable {}
extension Data4LifeFHIR.ListMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.ListStatus : Swift.Equatable {}
extension Data4LifeFHIR.ListStatus : Swift.Hashable {}
extension Data4LifeFHIR.ListStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.LocationMode : Swift.Equatable {}
extension Data4LifeFHIR.LocationMode : Swift.Hashable {}
extension Data4LifeFHIR.LocationMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.LocationStatus : Swift.Equatable {}
extension Data4LifeFHIR.LocationStatus : Swift.Hashable {}
extension Data4LifeFHIR.LocationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.MatchGrade : Swift.Equatable {}
extension Data4LifeFHIR.MatchGrade : Swift.Hashable {}
extension Data4LifeFHIR.MatchGrade : Swift.RawRepresentable {}
extension Data4LifeFHIR.MaxOccurs : Swift.Equatable {}
extension Data4LifeFHIR.MaxOccurs : Swift.Hashable {}
extension Data4LifeFHIR.MaxOccurs : Swift.RawRepresentable {}
extension Data4LifeFHIR.MeasmntPrinciple : Swift.Equatable {}
extension Data4LifeFHIR.MeasmntPrinciple : Swift.Hashable {}
extension Data4LifeFHIR.MeasmntPrinciple : Swift.RawRepresentable {}
extension Data4LifeFHIR.MeasureDataUsage : Swift.Equatable {}
extension Data4LifeFHIR.MeasureDataUsage : Swift.Hashable {}
extension Data4LifeFHIR.MeasureDataUsage : Swift.RawRepresentable {}
extension Data4LifeFHIR.MeasurePopulationType : Swift.Equatable {}
extension Data4LifeFHIR.MeasurePopulationType : Swift.Hashable {}
extension Data4LifeFHIR.MeasurePopulationType : Swift.RawRepresentable {}
extension Data4LifeFHIR.MeasureReportStatus : Swift.Equatable {}
extension Data4LifeFHIR.MeasureReportStatus : Swift.Hashable {}
extension Data4LifeFHIR.MeasureReportStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.MeasureReportType : Swift.Equatable {}
extension Data4LifeFHIR.MeasureReportType : Swift.Hashable {}
extension Data4LifeFHIR.MeasureReportType : Swift.RawRepresentable {}
extension Data4LifeFHIR.MeasureScoring : Swift.Equatable {}
extension Data4LifeFHIR.MeasureScoring : Swift.Hashable {}
extension Data4LifeFHIR.MeasureScoring : Swift.RawRepresentable {}
extension Data4LifeFHIR.MeasureType : Swift.Equatable {}
extension Data4LifeFHIR.MeasureType : Swift.Hashable {}
extension Data4LifeFHIR.MeasureType : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationAdministrationCategory : Swift.Equatable {}
extension Data4LifeFHIR.MedicationAdministrationCategory : Swift.Hashable {}
extension Data4LifeFHIR.MedicationAdministrationCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationAdministrationStatus : Swift.Equatable {}
extension Data4LifeFHIR.MedicationAdministrationStatus : Swift.Hashable {}
extension Data4LifeFHIR.MedicationAdministrationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationContainer : Swift.Equatable {}
extension Data4LifeFHIR.MedicationContainer : Swift.Hashable {}
extension Data4LifeFHIR.MedicationContainer : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationDispenseCategory : Swift.Equatable {}
extension Data4LifeFHIR.MedicationDispenseCategory : Swift.Hashable {}
extension Data4LifeFHIR.MedicationDispenseCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationDispenseStatus : Swift.Equatable {}
extension Data4LifeFHIR.MedicationDispenseStatus : Swift.Hashable {}
extension Data4LifeFHIR.MedicationDispenseStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationRequestCategory : Swift.Equatable {}
extension Data4LifeFHIR.MedicationRequestCategory : Swift.Hashable {}
extension Data4LifeFHIR.MedicationRequestCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationRequestIntent : Swift.Equatable {}
extension Data4LifeFHIR.MedicationRequestIntent : Swift.Hashable {}
extension Data4LifeFHIR.MedicationRequestIntent : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationRequestPriority : Swift.Equatable {}
extension Data4LifeFHIR.MedicationRequestPriority : Swift.Hashable {}
extension Data4LifeFHIR.MedicationRequestPriority : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationRequestStatus : Swift.Equatable {}
extension Data4LifeFHIR.MedicationRequestStatus : Swift.Hashable {}
extension Data4LifeFHIR.MedicationRequestStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationStatementCategory : Swift.Equatable {}
extension Data4LifeFHIR.MedicationStatementCategory : Swift.Hashable {}
extension Data4LifeFHIR.MedicationStatementCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationStatementStatus : Swift.Equatable {}
extension Data4LifeFHIR.MedicationStatementStatus : Swift.Hashable {}
extension Data4LifeFHIR.MedicationStatementStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationStatementTaken : Swift.Equatable {}
extension Data4LifeFHIR.MedicationStatementTaken : Swift.Hashable {}
extension Data4LifeFHIR.MedicationStatementTaken : Swift.RawRepresentable {}
extension Data4LifeFHIR.MedicationStatus : Swift.Equatable {}
extension Data4LifeFHIR.MedicationStatus : Swift.Hashable {}
extension Data4LifeFHIR.MedicationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.MessageEvent : Swift.Equatable {}
extension Data4LifeFHIR.MessageEvent : Swift.Hashable {}
extension Data4LifeFHIR.MessageEvent : Swift.RawRepresentable {}
extension Data4LifeFHIR.MessageSignificanceCategory : Swift.Equatable {}
extension Data4LifeFHIR.MessageSignificanceCategory : Swift.Hashable {}
extension Data4LifeFHIR.MessageSignificanceCategory : Swift.RawRepresentable {}
extension Data4LifeFHIR.MessageTransport : Swift.Equatable {}
extension Data4LifeFHIR.MessageTransport : Swift.Hashable {}
extension Data4LifeFHIR.MessageTransport : Swift.RawRepresentable {}
extension Data4LifeFHIR.MessageheaderResponseRequest : Swift.Equatable {}
extension Data4LifeFHIR.MessageheaderResponseRequest : Swift.Hashable {}
extension Data4LifeFHIR.MessageheaderResponseRequest : Swift.RawRepresentable {}
extension Data4LifeFHIR.NHINPurposeOfUse : Swift.Equatable {}
extension Data4LifeFHIR.NHINPurposeOfUse : Swift.Hashable {}
extension Data4LifeFHIR.NHINPurposeOfUse : Swift.RawRepresentable {}
extension Data4LifeFHIR.NameUse : Swift.Equatable {}
extension Data4LifeFHIR.NameUse : Swift.Hashable {}
extension Data4LifeFHIR.NameUse : Swift.RawRepresentable {}
extension Data4LifeFHIR.NamingSystemIdentifierType : Swift.Equatable {}
extension Data4LifeFHIR.NamingSystemIdentifierType : Swift.Hashable {}
extension Data4LifeFHIR.NamingSystemIdentifierType : Swift.RawRepresentable {}
extension Data4LifeFHIR.NamingSystemType : Swift.Equatable {}
extension Data4LifeFHIR.NamingSystemType : Swift.Hashable {}
extension Data4LifeFHIR.NamingSystemType : Swift.RawRepresentable {}
extension Data4LifeFHIR.NarrativeStatus : Swift.Equatable {}
extension Data4LifeFHIR.NarrativeStatus : Swift.Hashable {}
extension Data4LifeFHIR.NarrativeStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.NoteType : Swift.Equatable {}
extension Data4LifeFHIR.NoteType : Swift.Hashable {}
extension Data4LifeFHIR.NoteType : Swift.RawRepresentable {}
extension Data4LifeFHIR.NutritionOrderStatus : Swift.Equatable {}
extension Data4LifeFHIR.NutritionOrderStatus : Swift.Hashable {}
extension Data4LifeFHIR.NutritionOrderStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ObservationRelationshipType : Swift.Equatable {}
extension Data4LifeFHIR.ObservationRelationshipType : Swift.Hashable {}
extension Data4LifeFHIR.ObservationRelationshipType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ObservationStatus : Swift.Equatable {}
extension Data4LifeFHIR.ObservationStatus : Swift.Hashable {}
extension Data4LifeFHIR.ObservationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.OperationKind : Swift.Equatable {}
extension Data4LifeFHIR.OperationKind : Swift.Hashable {}
extension Data4LifeFHIR.OperationKind : Swift.RawRepresentable {}
extension Data4LifeFHIR.OperationOutcomeCodes : Swift.Equatable {}
extension Data4LifeFHIR.OperationOutcomeCodes : Swift.Hashable {}
extension Data4LifeFHIR.OperationOutcomeCodes : Swift.RawRepresentable {}
extension Data4LifeFHIR.OperationParameterUse : Swift.Equatable {}
extension Data4LifeFHIR.OperationParameterUse : Swift.Hashable {}
extension Data4LifeFHIR.OperationParameterUse : Swift.RawRepresentable {}
extension Data4LifeFHIR.ParticipantRequired : Swift.Equatable {}
extension Data4LifeFHIR.ParticipantRequired : Swift.Hashable {}
extension Data4LifeFHIR.ParticipantRequired : Swift.RawRepresentable {}
extension Data4LifeFHIR.ParticipationStatus : Swift.Equatable {}
extension Data4LifeFHIR.ParticipationStatus : Swift.Hashable {}
extension Data4LifeFHIR.ParticipationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.PlanDefinitionType : Swift.Equatable {}
extension Data4LifeFHIR.PlanDefinitionType : Swift.Hashable {}
extension Data4LifeFHIR.PlanDefinitionType : Swift.RawRepresentable {}
extension Data4LifeFHIR.PropertyRepresentation : Swift.Equatable {}
extension Data4LifeFHIR.PropertyRepresentation : Swift.Hashable {}
extension Data4LifeFHIR.PropertyRepresentation : Swift.RawRepresentable {}
extension Data4LifeFHIR.PropertyType : Swift.Equatable {}
extension Data4LifeFHIR.PropertyType : Swift.Hashable {}
extension Data4LifeFHIR.PropertyType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ProvenanceEntityRole : Swift.Equatable {}
extension Data4LifeFHIR.ProvenanceEntityRole : Swift.Hashable {}
extension Data4LifeFHIR.ProvenanceEntityRole : Swift.RawRepresentable {}
extension Data4LifeFHIR.PublicationStatus : Swift.Equatable {}
extension Data4LifeFHIR.PublicationStatus : Swift.Hashable {}
extension Data4LifeFHIR.PublicationStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.QualityOfEvidenceRating : Swift.Equatable {}
extension Data4LifeFHIR.QualityOfEvidenceRating : Swift.Hashable {}
extension Data4LifeFHIR.QualityOfEvidenceRating : Swift.RawRepresentable {}
extension Data4LifeFHIR.QualityType : Swift.Equatable {}
extension Data4LifeFHIR.QualityType : Swift.Hashable {}
extension Data4LifeFHIR.QualityType : Swift.RawRepresentable {}
extension Data4LifeFHIR.QuantityComparator : Swift.Equatable {}
extension Data4LifeFHIR.QuantityComparator : Swift.Hashable {}
extension Data4LifeFHIR.QuantityComparator : Swift.RawRepresentable {}
extension Data4LifeFHIR.QuestionnaireItemType : Swift.Equatable {}
extension Data4LifeFHIR.QuestionnaireItemType : Swift.Hashable {}
extension Data4LifeFHIR.QuestionnaireItemType : Swift.RawRepresentable {}
extension Data4LifeFHIR.QuestionnaireItemUsageMode : Swift.Equatable {}
extension Data4LifeFHIR.QuestionnaireItemUsageMode : Swift.Hashable {}
extension Data4LifeFHIR.QuestionnaireItemUsageMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.QuestionnaireResponseStatus : Swift.Equatable {}
extension Data4LifeFHIR.QuestionnaireResponseStatus : Swift.Hashable {}
extension Data4LifeFHIR.QuestionnaireResponseStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ReferenceHandlingPolicy : Swift.Equatable {}
extension Data4LifeFHIR.ReferenceHandlingPolicy : Swift.Hashable {}
extension Data4LifeFHIR.ReferenceHandlingPolicy : Swift.RawRepresentable {}
extension Data4LifeFHIR.ReferenceVersionRules : Swift.Equatable {}
extension Data4LifeFHIR.ReferenceVersionRules : Swift.Hashable {}
extension Data4LifeFHIR.ReferenceVersionRules : Swift.RawRepresentable {}
extension Data4LifeFHIR.ReferralMethod : Swift.Equatable {}
extension Data4LifeFHIR.ReferralMethod : Swift.Hashable {}
extension Data4LifeFHIR.ReferralMethod : Swift.RawRepresentable {}
extension Data4LifeFHIR.RelatedArtifactType : Swift.Equatable {}
extension Data4LifeFHIR.RelatedArtifactType : Swift.Hashable {}
extension Data4LifeFHIR.RelatedArtifactType : Swift.RawRepresentable {}
extension Data4LifeFHIR.RepositoryType : Swift.Equatable {}
extension Data4LifeFHIR.RepositoryType : Swift.Hashable {}
extension Data4LifeFHIR.RepositoryType : Swift.RawRepresentable {}
extension Data4LifeFHIR.RequestIntent : Swift.Equatable {}
extension Data4LifeFHIR.RequestIntent : Swift.Hashable {}
extension Data4LifeFHIR.RequestIntent : Swift.RawRepresentable {}
extension Data4LifeFHIR.RequestPriority : Swift.Equatable {}
extension Data4LifeFHIR.RequestPriority : Swift.Hashable {}
extension Data4LifeFHIR.RequestPriority : Swift.RawRepresentable {}
extension Data4LifeFHIR.RequestStatus : Swift.Equatable {}
extension Data4LifeFHIR.RequestStatus : Swift.Hashable {}
extension Data4LifeFHIR.RequestStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ResearchStudyStatus : Swift.Equatable {}
extension Data4LifeFHIR.ResearchStudyStatus : Swift.Hashable {}
extension Data4LifeFHIR.ResearchStudyStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ResearchSubjectStatus : Swift.Equatable {}
extension Data4LifeFHIR.ResearchSubjectStatus : Swift.Hashable {}
extension Data4LifeFHIR.ResearchSubjectStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.ResourceTypeLink : Swift.Equatable {}
extension Data4LifeFHIR.ResourceTypeLink : Swift.Hashable {}
extension Data4LifeFHIR.ResourceTypeLink : Swift.RawRepresentable {}
extension Data4LifeFHIR.ResourceValidationMode : Swift.Equatable {}
extension Data4LifeFHIR.ResourceValidationMode : Swift.Hashable {}
extension Data4LifeFHIR.ResourceValidationMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.ResourceVersionPolicy : Swift.Equatable {}
extension Data4LifeFHIR.ResourceVersionPolicy : Swift.Hashable {}
extension Data4LifeFHIR.ResourceVersionPolicy : Swift.RawRepresentable {}
extension Data4LifeFHIR.ResponseType : Swift.Equatable {}
extension Data4LifeFHIR.ResponseType : Swift.Hashable {}
extension Data4LifeFHIR.ResponseType : Swift.RawRepresentable {}
extension Data4LifeFHIR.RestfulCapabilityMode : Swift.Equatable {}
extension Data4LifeFHIR.RestfulCapabilityMode : Swift.Hashable {}
extension Data4LifeFHIR.RestfulCapabilityMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.RestfulSecurityService : Swift.Equatable {}
extension Data4LifeFHIR.RestfulSecurityService : Swift.Hashable {}
extension Data4LifeFHIR.RestfulSecurityService : Swift.RawRepresentable {}
extension Data4LifeFHIR.SearchComparator : Swift.Equatable {}
extension Data4LifeFHIR.SearchComparator : Swift.Hashable {}
extension Data4LifeFHIR.SearchComparator : Swift.RawRepresentable {}
extension Data4LifeFHIR.SearchEntryMode : Swift.Equatable {}
extension Data4LifeFHIR.SearchEntryMode : Swift.Hashable {}
extension Data4LifeFHIR.SearchEntryMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.SearchModifierCode : Swift.Equatable {}
extension Data4LifeFHIR.SearchModifierCode : Swift.Hashable {}
extension Data4LifeFHIR.SearchModifierCode : Swift.RawRepresentable {}
extension Data4LifeFHIR.SearchParamType : Swift.Equatable {}
extension Data4LifeFHIR.SearchParamType : Swift.Hashable {}
extension Data4LifeFHIR.SearchParamType : Swift.RawRepresentable {}
extension Data4LifeFHIR.SequenceStatus : Swift.Equatable {}
extension Data4LifeFHIR.SequenceStatus : Swift.Hashable {}
extension Data4LifeFHIR.SequenceStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.SequenceType : Swift.Equatable {}
extension Data4LifeFHIR.SequenceType : Swift.Hashable {}
extension Data4LifeFHIR.SequenceType : Swift.RawRepresentable {}
extension Data4LifeFHIR.ServiceProvisionConditions : Swift.Equatable {}
extension Data4LifeFHIR.ServiceProvisionConditions : Swift.Hashable {}
extension Data4LifeFHIR.ServiceProvisionConditions : Swift.RawRepresentable {}
extension Data4LifeFHIR.SlicingRules : Swift.Equatable {}
extension Data4LifeFHIR.SlicingRules : Swift.Hashable {}
extension Data4LifeFHIR.SlicingRules : Swift.RawRepresentable {}
extension Data4LifeFHIR.SlotStatus : Swift.Equatable {}
extension Data4LifeFHIR.SlotStatus : Swift.Hashable {}
extension Data4LifeFHIR.SlotStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.SpecialValues : Swift.Equatable {}
extension Data4LifeFHIR.SpecialValues : Swift.Hashable {}
extension Data4LifeFHIR.SpecialValues : Swift.RawRepresentable {}
extension Data4LifeFHIR.SpecimenStatus : Swift.Equatable {}
extension Data4LifeFHIR.SpecimenStatus : Swift.Hashable {}
extension Data4LifeFHIR.SpecimenStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.StrengthOfRecommendationRating : Swift.Equatable {}
extension Data4LifeFHIR.StrengthOfRecommendationRating : Swift.Hashable {}
extension Data4LifeFHIR.StrengthOfRecommendationRating : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureDefinitionKind : Swift.Equatable {}
extension Data4LifeFHIR.StructureDefinitionKind : Swift.Hashable {}
extension Data4LifeFHIR.StructureDefinitionKind : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureMapContextType : Swift.Equatable {}
extension Data4LifeFHIR.StructureMapContextType : Swift.Hashable {}
extension Data4LifeFHIR.StructureMapContextType : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureMapGroupTypeMode : Swift.Equatable {}
extension Data4LifeFHIR.StructureMapGroupTypeMode : Swift.Hashable {}
extension Data4LifeFHIR.StructureMapGroupTypeMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureMapInputMode : Swift.Equatable {}
extension Data4LifeFHIR.StructureMapInputMode : Swift.Hashable {}
extension Data4LifeFHIR.StructureMapInputMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureMapModelMode : Swift.Equatable {}
extension Data4LifeFHIR.StructureMapModelMode : Swift.Hashable {}
extension Data4LifeFHIR.StructureMapModelMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureMapSourceListMode : Swift.Equatable {}
extension Data4LifeFHIR.StructureMapSourceListMode : Swift.Hashable {}
extension Data4LifeFHIR.StructureMapSourceListMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureMapTargetListMode : Swift.Equatable {}
extension Data4LifeFHIR.StructureMapTargetListMode : Swift.Hashable {}
extension Data4LifeFHIR.StructureMapTargetListMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.StructureMapTransform : Swift.Equatable {}
extension Data4LifeFHIR.StructureMapTransform : Swift.Hashable {}
extension Data4LifeFHIR.StructureMapTransform : Swift.RawRepresentable {}
extension Data4LifeFHIR.SubscriptionChannelType : Swift.Equatable {}
extension Data4LifeFHIR.SubscriptionChannelType : Swift.Hashable {}
extension Data4LifeFHIR.SubscriptionChannelType : Swift.RawRepresentable {}
extension Data4LifeFHIR.SubscriptionStatus : Swift.Equatable {}
extension Data4LifeFHIR.SubscriptionStatus : Swift.Hashable {}
extension Data4LifeFHIR.SubscriptionStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.SubscriptionTag : Swift.Equatable {}
extension Data4LifeFHIR.SubscriptionTag : Swift.Hashable {}
extension Data4LifeFHIR.SubscriptionTag : Swift.RawRepresentable {}
extension Data4LifeFHIR.SupplyDeliveryStatus : Swift.Equatable {}
extension Data4LifeFHIR.SupplyDeliveryStatus : Swift.Hashable {}
extension Data4LifeFHIR.SupplyDeliveryStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.SupplyRequestReason : Swift.Equatable {}
extension Data4LifeFHIR.SupplyRequestReason : Swift.Hashable {}
extension Data4LifeFHIR.SupplyRequestReason : Swift.RawRepresentable {}
extension Data4LifeFHIR.SupplyRequestStatus : Swift.Equatable {}
extension Data4LifeFHIR.SupplyRequestStatus : Swift.Hashable {}
extension Data4LifeFHIR.SupplyRequestStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.SystemVersionProcessingMode : Swift.Equatable {}
extension Data4LifeFHIR.SystemVersionProcessingMode : Swift.Hashable {}
extension Data4LifeFHIR.SystemVersionProcessingMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.TaskPerformerType : Swift.Equatable {}
extension Data4LifeFHIR.TaskPerformerType : Swift.Hashable {}
extension Data4LifeFHIR.TaskPerformerType : Swift.RawRepresentable {}
extension Data4LifeFHIR.TaskStatus : Swift.Equatable {}
extension Data4LifeFHIR.TaskStatus : Swift.Hashable {}
extension Data4LifeFHIR.TaskStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.TestReportActionResult : Swift.Equatable {}
extension Data4LifeFHIR.TestReportActionResult : Swift.Hashable {}
extension Data4LifeFHIR.TestReportActionResult : Swift.RawRepresentable {}
extension Data4LifeFHIR.TestReportParticipantType : Swift.Equatable {}
extension Data4LifeFHIR.TestReportParticipantType : Swift.Hashable {}
extension Data4LifeFHIR.TestReportParticipantType : Swift.RawRepresentable {}
extension Data4LifeFHIR.TestReportResult : Swift.Equatable {}
extension Data4LifeFHIR.TestReportResult : Swift.Hashable {}
extension Data4LifeFHIR.TestReportResult : Swift.RawRepresentable {}
extension Data4LifeFHIR.TestReportStatus : Swift.Equatable {}
extension Data4LifeFHIR.TestReportStatus : Swift.Hashable {}
extension Data4LifeFHIR.TestReportStatus : Swift.RawRepresentable {}
extension Data4LifeFHIR.TestScriptRequestMethodCode : Swift.Equatable {}
extension Data4LifeFHIR.TestScriptRequestMethodCode : Swift.Hashable {}
extension Data4LifeFHIR.TestScriptRequestMethodCode : Swift.RawRepresentable {}
extension Data4LifeFHIR.TransactionMode : Swift.Equatable {}
extension Data4LifeFHIR.TransactionMode : Swift.Hashable {}
extension Data4LifeFHIR.TransactionMode : Swift.RawRepresentable {}
extension Data4LifeFHIR.TriggerType : Swift.Equatable {}
extension Data4LifeFHIR.TriggerType : Swift.Hashable {}
extension Data4LifeFHIR.TriggerType : Swift.RawRepresentable {}
extension Data4LifeFHIR.TypeDerivationRule : Swift.Equatable {}
extension Data4LifeFHIR.TypeDerivationRule : Swift.Hashable {}
extension Data4LifeFHIR.TypeDerivationRule : Swift.RawRepresentable {}
extension Data4LifeFHIR.UDIEntryType : Swift.Equatable {}
extension Data4LifeFHIR.UDIEntryType : Swift.Hashable {}
extension Data4LifeFHIR.UDIEntryType : Swift.RawRepresentable {}
extension Data4LifeFHIR.UnknownContentCode : Swift.Equatable {}
extension Data4LifeFHIR.UnknownContentCode : Swift.Hashable {}
extension Data4LifeFHIR.UnknownContentCode : Swift.RawRepresentable {}
extension Data4LifeFHIR.UsageContextType : Swift.Equatable {}
extension Data4LifeFHIR.UsageContextType : Swift.Hashable {}
extension Data4LifeFHIR.UsageContextType : Swift.RawRepresentable {}
extension Data4LifeFHIR.Use : Swift.Equatable {}
extension Data4LifeFHIR.Use : Swift.Hashable {}
extension Data4LifeFHIR.Use : Swift.RawRepresentable {}
extension Data4LifeFHIR.VisionBase : Swift.Equatable {}
extension Data4LifeFHIR.VisionBase : Swift.Hashable {}
extension Data4LifeFHIR.VisionBase : Swift.RawRepresentable {}
extension Data4LifeFHIR.VisionEyes : Swift.Equatable {}
extension Data4LifeFHIR.VisionEyes : Swift.Hashable {}
extension Data4LifeFHIR.VisionEyes : Swift.RawRepresentable {}
extension Data4LifeFHIR.XPathUsageType : Swift.Equatable {}
extension Data4LifeFHIR.XPathUsageType : Swift.Hashable {}
extension Data4LifeFHIR.XPathUsageType : Swift.RawRepresentable {}
