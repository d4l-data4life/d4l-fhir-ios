{% macro addOptionalMark variable %}{% if variable.isOptional %}?{% endif %}{% endmacro %}
{% macro addOptionalCast variable %} as{% if variable.isOptional %}?{% else %}!{% endif %} {{ variable.typeName.unwrappedTypeName }}{% endmacro %}
// Copyright (c) 2020 D4L data4life gGmbH
// All rights reserved.

// D4L owns all legal rights, title and interest in and to the Software Development Kit ("SDK"),
// including any intellectual property rights that subsist in the SDK.

// The SDK and its documentation may be accessed and used for viewing/review purposes only.
// Any usage of the SDK for other purposes, including usage for the development of
// applications/third-party applications shall require the conclusion of a license agreement
// between you and D4L.

// If you are interested in licensing the SDK for your own applications/third-party
// applications and/or if youâ€™d like to contribute to the development of the SDK, please
// contact D4L by email to help@data4life.care.

// swiftlint:disable file_length
import Foundation

// MARK: - NSCopying
{% for type in types.classes %}
// MARK: - {{ type.name }}
extension ModelsR4.{{ type.name }}{% if not type.supertype %}: NSCopying{% endif %} {

    {% if type.supertype %}override {% else %}@objc {% endif %}func copied(on subClassInstance: Any? = nil) -> Any {
        let resourceToCopy = subClassInstance ?? ModelsR4.{{ type.name }}({% for parameter in type.initializers.first.parameters %}{{ parameter.name|replace:"`","" }}: self.{{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %})
        guard let resource = {% if type.supertype %}super.copied(on: resourceToCopy) {% else %}resourceToCopy {% endif %}as? ModelsR4.{{ type.name }} else {
            return self
        }
        {% for variable in type.variables where not variable.isStatic and not variable.name == "description" %}
        {% set variableKind variable.type.kind %}
        {% set variableUnwrappedType variable.typeName.unwrappedTypeName %}
        {% set variableArrayElementKind variable.typeName.array.elementType.kind %}
        {% set variableArrayElementType variable.typeName.array.elementType.name %}
        {% set isVariableArray variable.typeName.isArray %}
        {% set isVariableEnumWithAssociatedValues variable.typeName.enum.hasAssociatedValues %}
        {% set isVariableOptional variable.isOptional %}
        resource.{{ variable.name }} = self.{{ variable.name }}{% if variableKind == "class" or ( isVariableArray and variableArrayElementKind == "class" ) or ( variableKind == "enum" and isVariableEnumWithAssociatedValues ) %}{% call addOptionalMark variable %}{% if isVariableArray %}.compactMap { $0.copy() as? {{ variableArrayElementType }} } {% else %}.copy(){% call addOptionalCast variable %}{% endif %}{% endif %}
        {% endfor %}

        return resource
    }

    {% if type.supertype %}override {% else %}@objc {% endif %}public func copy(with zone: NSZone? = nil) -> Any {
        return self.copied()
    }
}

{% endfor %}
